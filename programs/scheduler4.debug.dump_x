
programs/mem/scheduler4.debug.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <crt>:

.global crt
.section .text.prologue, "ax"
.align 4
crt:
    nop
   0:	00000013          	addi	x0,x0,0
    la ra, exit
   4:	00000097          	auipc	x1,0x0
   8:	09c08093          	addi	x1,x1,156 # a0 <exit>
    la sp, _sp
   c:	00010117          	auipc	x2,0x10
  10:	ff410113          	addi	x2,x2,-12 # 10000 <_sp>
    mv s0, sp
  14:	00010413          	addi	x8,x2,0
    la gp, __global_pointer$
  18:	00001197          	auipc	x3,0x1
  1c:	06818193          	addi	x3,x3,104 # 1080 <__global_pointer$>
    li tp, 0
  20:	00000213          	addi	x4,x0,0
    li t0, 0
  24:	00000293          	addi	x5,x0,0
    li t1, 0
  28:	00000313          	addi	x6,x0,0
    li t2, 0
  2c:	00000393          	addi	x7,x0,0
    li s1, 0
  30:	00000493          	addi	x9,x0,0
    li a0, 0
  34:	00000513          	addi	x10,x0,0
    li a1, 0
  38:	00000593          	addi	x11,x0,0
    li a2, 0
  3c:	00000613          	addi	x12,x0,0
    li a3, 0
  40:	00000693          	addi	x13,x0,0
    li a4, 0
  44:	00000713          	addi	x14,x0,0
    li a5, 0
  48:	00000793          	addi	x15,x0,0
    li a6, 0
  4c:	00000813          	addi	x16,x0,0
    li a7, 0
  50:	00000893          	addi	x17,x0,0
    li s2, 0
  54:	00000913          	addi	x18,x0,0
    li s3, 0
  58:	00000993          	addi	x19,x0,0
    li s4, 0
  5c:	00000a13          	addi	x20,x0,0
    li s5, 0
  60:	00000a93          	addi	x21,x0,0
    li s6, 0
  64:	00000b13          	addi	x22,x0,0
    li s7, 0
  68:	00000b93          	addi	x23,x0,0
    li s8, 0
  6c:	00000c13          	addi	x24,x0,0
    li s9, 0
  70:	00000c93          	addi	x25,x0,0
    li s10, 0
  74:	00000d13          	addi	x26,x0,0
    li s11, 0
  78:	00000d93          	addi	x27,x0,0
    li t3, 0
  7c:	00000e13          	addi	x28,x0,0
    li t4, 0
  80:	00000e93          	addi	x29,x0,0
    li t5, 0
  84:	00000f13          	addi	x30,x0,0
    li t6, 0
  88:	00000f93          	addi	x31,x0,0
    j main
  8c:	0280006f          	jal	x0,b4 <main>
	...

000000a0 <exit>:

.global exit
.section .text
.align 4
exit:
    la sp, _sp
  a0:	00010117          	auipc	x2,0x10
  a4:	f6010113          	addi	x2,x2,-160 # 10000 <_sp>
    sw a0, -8(sp)
  a8:	fea12c23          	sw	x10,-8(x2)
    nop
  ac:	00000013          	addi	x0,x0,0
    wfi
  b0:	10500073          	wfi

000000b4 <main>:
unsigned int memory_data[200];
unsigned int hardware_data[200];


int main(void)
{
  b4:	f6010113          	addi	x2,x2,-160
  b8:	08812e23          	sw	x8,156(x2)
  bc:	0a010413          	addi	x8,x2,160
    int b;
    int a;


    // Initialize the memory buffer with some sample data
    for (int i = 0; i < 200; i++) {
  c0:	fe042423          	sw	x0,-24(x8)
  c4:	0640006f          	jal	x0,128 <main+0x74>
        memory_data[i] = (unsigned int)(i % 30);
  c8:	fe842703          	lw	x14,-24(x8)
  cc:	888897b7          	lui	x15,0x88889
  d0:	88978793          	addi	x15,x15,-1911 # 88888889 <_sp+0x88878889>
  d4:	02f706b3          	mul	x13,x14,x15
  d8:	02f715b3          	mulh	x11,x14,x15
  dc:	00068513          	addi	x10,x13,0
  e0:	00b707b3          	add	x15,x14,x11
  e4:	4047d693          	srai	x13,x15,0x4
  e8:	41f75793          	srai	x15,x14,0x1f
  ec:	40f686b3          	sub	x13,x13,x15
  f0:	00068793          	addi	x15,x13,0
  f4:	00479793          	slli	x15,x15,0x4
  f8:	40d787b3          	sub	x15,x15,x13
  fc:	00179793          	slli	x15,x15,0x1
 100:	40f706b3          	sub	x13,x14,x15
 104:	000017b7          	lui	x15,0x1
 108:	be078713          	addi	x14,x15,-1056 # be0 <memory_data>
 10c:	fe842783          	lw	x15,-24(x8)
 110:	00279793          	slli	x15,x15,0x2
 114:	00f707b3          	add	x15,x14,x15
 118:	00d7a023          	sw	x13,0(x15)
    for (int i = 0; i < 200; i++) {
 11c:	fe842783          	lw	x15,-24(x8)
 120:	00178793          	addi	x15,x15,1
 124:	fef42423          	sw	x15,-24(x8)
 128:	fe842703          	lw	x14,-24(x8)
 12c:	0c700793          	addi	x15,x0,199
 130:	f8e7dce3          	bge	x15,x14,c8 <main+0x14>

    // Main scheduling loop (runs indefinitely)

    // offload_task(memory_data, 0);

    a = 0;
 134:	fe042623          	sw	x0,-20(x8)
    b = 20;
 138:	01400793          	addi	x15,x0,20
 13c:	f6f42623          	sw	x15,-148(x8)

    if (b == 1) {
 140:	f6c42703          	lw	x14,-148(x8)
 144:	00100793          	addi	x15,x0,1
 148:	04f71c63          	bne	x14,x15,1a0 <main+0xec>
        for (int i = 0; i < 50; i++) {
 14c:	fe042223          	sw	x0,-28(x8)
 150:	0400006f          	jal	x0,190 <main+0xdc>
            hardware_data[i] = memory_data[i];
 154:	000017b7          	lui	x15,0x1
 158:	be078713          	addi	x14,x15,-1056 # be0 <memory_data>
 15c:	fe442783          	lw	x15,-28(x8)
 160:	00279793          	slli	x15,x15,0x2
 164:	00f707b3          	add	x15,x14,x15
 168:	0007a703          	lw	x14,0(x15)
 16c:	000017b7          	lui	x15,0x1
 170:	8c078693          	addi	x13,x15,-1856 # 8c0 <hardware_data>
 174:	fe442783          	lw	x15,-28(x8)
 178:	00279793          	slli	x15,x15,0x2
 17c:	00f687b3          	add	x15,x13,x15
 180:	00e7a023          	sw	x14,0(x15)
        for (int i = 0; i < 50; i++) {
 184:	fe442783          	lw	x15,-28(x8)
 188:	00178793          	addi	x15,x15,1
 18c:	fef42223          	sw	x15,-28(x8)
 190:	fe442703          	lw	x14,-28(x8)
 194:	03100793          	addi	x15,x0,49
 198:	fae7dee3          	bge	x15,x14,154 <main+0xa0>
 19c:	6cc0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 2) {
 1a0:	f6c42703          	lw	x14,-148(x8)
 1a4:	00200793          	addi	x15,x0,2
 1a8:	02f71a63          	bne	x14,x15,1dc <main+0x128>
        for (int i = 0; i < 10; i++) {
 1ac:	fe042023          	sw	x0,-32(x8)
 1b0:	01c0006f          	jal	x0,1cc <main+0x118>
            a = a + 1;
 1b4:	fec42783          	lw	x15,-20(x8)
 1b8:	00178793          	addi	x15,x15,1
 1bc:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 10; i++) {
 1c0:	fe042783          	lw	x15,-32(x8)
 1c4:	00178793          	addi	x15,x15,1
 1c8:	fef42023          	sw	x15,-32(x8)
 1cc:	fe042703          	lw	x14,-32(x8)
 1d0:	00900793          	addi	x15,x0,9
 1d4:	fee7d0e3          	bge	x15,x14,1b4 <main+0x100>
 1d8:	6900006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 3) {
 1dc:	f6c42703          	lw	x14,-148(x8)
 1e0:	00300793          	addi	x15,x0,3
 1e4:	02f71a63          	bne	x14,x15,218 <main+0x164>
        for (int i = 0; i < 10; i++) {
 1e8:	fc042e23          	sw	x0,-36(x8)
 1ec:	01c0006f          	jal	x0,208 <main+0x154>
            a = a + 1;
 1f0:	fec42783          	lw	x15,-20(x8)
 1f4:	00178793          	addi	x15,x15,1
 1f8:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 10; i++) {
 1fc:	fdc42783          	lw	x15,-36(x8)
 200:	00178793          	addi	x15,x15,1
 204:	fcf42e23          	sw	x15,-36(x8)
 208:	fdc42703          	lw	x14,-36(x8)
 20c:	00900793          	addi	x15,x0,9
 210:	fee7d0e3          	bge	x15,x14,1f0 <main+0x13c>
 214:	6540006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 4) {
 218:	f6c42703          	lw	x14,-148(x8)
 21c:	00400793          	addi	x15,x0,4
 220:	02f71a63          	bne	x14,x15,254 <main+0x1a0>
        for (int i = 0; i < 100; i++) {
 224:	fc042c23          	sw	x0,-40(x8)
 228:	01c0006f          	jal	x0,244 <main+0x190>
            a = a + 1;
 22c:	fec42783          	lw	x15,-20(x8)
 230:	00178793          	addi	x15,x15,1
 234:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 100; i++) {
 238:	fd842783          	lw	x15,-40(x8)
 23c:	00178793          	addi	x15,x15,1
 240:	fcf42c23          	sw	x15,-40(x8)
 244:	fd842703          	lw	x14,-40(x8)
 248:	06300793          	addi	x15,x0,99
 24c:	fee7d0e3          	bge	x15,x14,22c <main+0x178>
 250:	6180006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 5) {
 254:	f6c42703          	lw	x14,-148(x8)
 258:	00500793          	addi	x15,x0,5
 25c:	02f71a63          	bne	x14,x15,290 <main+0x1dc>
        for (int i = 0; i < 50; i++) {
 260:	fc042a23          	sw	x0,-44(x8)
 264:	01c0006f          	jal	x0,280 <main+0x1cc>
            a = a + 1;
 268:	fec42783          	lw	x15,-20(x8)
 26c:	00178793          	addi	x15,x15,1
 270:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 50; i++) {
 274:	fd442783          	lw	x15,-44(x8)
 278:	00178793          	addi	x15,x15,1
 27c:	fcf42a23          	sw	x15,-44(x8)
 280:	fd442703          	lw	x14,-44(x8)
 284:	03100793          	addi	x15,x0,49
 288:	fee7d0e3          	bge	x15,x14,268 <main+0x1b4>
 28c:	5dc0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 6) {
 290:	f6c42703          	lw	x14,-148(x8)
 294:	00600793          	addi	x15,x0,6
 298:	02f71a63          	bne	x14,x15,2cc <main+0x218>
        for (int i = 0; i < 60; i++) {
 29c:	fc042823          	sw	x0,-48(x8)
 2a0:	01c0006f          	jal	x0,2bc <main+0x208>
            a = a + 1;
 2a4:	fec42783          	lw	x15,-20(x8)
 2a8:	00178793          	addi	x15,x15,1
 2ac:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 60; i++) {
 2b0:	fd042783          	lw	x15,-48(x8)
 2b4:	00178793          	addi	x15,x15,1
 2b8:	fcf42823          	sw	x15,-48(x8)
 2bc:	fd042703          	lw	x14,-48(x8)
 2c0:	03b00793          	addi	x15,x0,59
 2c4:	fee7d0e3          	bge	x15,x14,2a4 <main+0x1f0>
 2c8:	5a00006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 7) {
 2cc:	f6c42703          	lw	x14,-148(x8)
 2d0:	00700793          	addi	x15,x0,7
 2d4:	02f71a63          	bne	x14,x15,308 <main+0x254>
        for (int i = 0; i < 70; i++) {
 2d8:	fc042623          	sw	x0,-52(x8)
 2dc:	01c0006f          	jal	x0,2f8 <main+0x244>
            a = a + 1;
 2e0:	fec42783          	lw	x15,-20(x8)
 2e4:	00178793          	addi	x15,x15,1
 2e8:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 70; i++) {
 2ec:	fcc42783          	lw	x15,-52(x8)
 2f0:	00178793          	addi	x15,x15,1
 2f4:	fcf42623          	sw	x15,-52(x8)
 2f8:	fcc42703          	lw	x14,-52(x8)
 2fc:	04500793          	addi	x15,x0,69
 300:	fee7d0e3          	bge	x15,x14,2e0 <main+0x22c>
 304:	5640006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 8) {
 308:	f6c42703          	lw	x14,-148(x8)
 30c:	00800793          	addi	x15,x0,8
 310:	02f71a63          	bne	x14,x15,344 <main+0x290>
        for (int i = 0; i < 80; i++) {
 314:	fc042423          	sw	x0,-56(x8)
 318:	01c0006f          	jal	x0,334 <main+0x280>
            a = a + 1;
 31c:	fec42783          	lw	x15,-20(x8)
 320:	00178793          	addi	x15,x15,1
 324:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 80; i++) {
 328:	fc842783          	lw	x15,-56(x8)
 32c:	00178793          	addi	x15,x15,1
 330:	fcf42423          	sw	x15,-56(x8)
 334:	fc842703          	lw	x14,-56(x8)
 338:	04f00793          	addi	x15,x0,79
 33c:	fee7d0e3          	bge	x15,x14,31c <main+0x268>
 340:	5280006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 9) {
 344:	f6c42703          	lw	x14,-148(x8)
 348:	00900793          	addi	x15,x0,9
 34c:	02f71a63          	bne	x14,x15,380 <main+0x2cc>
        for (int i = 0; i < 90; i++) {
 350:	fc042223          	sw	x0,-60(x8)
 354:	01c0006f          	jal	x0,370 <main+0x2bc>
            a = a + 1;
 358:	fec42783          	lw	x15,-20(x8)
 35c:	00178793          	addi	x15,x15,1
 360:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 90; i++) {
 364:	fc442783          	lw	x15,-60(x8)
 368:	00178793          	addi	x15,x15,1
 36c:	fcf42223          	sw	x15,-60(x8)
 370:	fc442703          	lw	x14,-60(x8)
 374:	05900793          	addi	x15,x0,89
 378:	fee7d0e3          	bge	x15,x14,358 <main+0x2a4>
 37c:	4ec0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 10) {
 380:	f6c42703          	lw	x14,-148(x8)
 384:	00a00793          	addi	x15,x0,10
 388:	02f71a63          	bne	x14,x15,3bc <main+0x308>
        for (int i = 0; i < 100; i++) {
 38c:	fc042023          	sw	x0,-64(x8)
 390:	01c0006f          	jal	x0,3ac <main+0x2f8>
            a = a + 1;
 394:	fec42783          	lw	x15,-20(x8)
 398:	00178793          	addi	x15,x15,1
 39c:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 100; i++) {
 3a0:	fc042783          	lw	x15,-64(x8)
 3a4:	00178793          	addi	x15,x15,1
 3a8:	fcf42023          	sw	x15,-64(x8)
 3ac:	fc042703          	lw	x14,-64(x8)
 3b0:	06300793          	addi	x15,x0,99
 3b4:	fee7d0e3          	bge	x15,x14,394 <main+0x2e0>
 3b8:	4b00006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 11) {
 3bc:	f6c42703          	lw	x14,-148(x8)
 3c0:	00b00793          	addi	x15,x0,11
 3c4:	02f71a63          	bne	x14,x15,3f8 <main+0x344>
        for (int i = 0; i < 110; i++) {
 3c8:	fa042e23          	sw	x0,-68(x8)
 3cc:	01c0006f          	jal	x0,3e8 <main+0x334>
            a = a + 1;
 3d0:	fec42783          	lw	x15,-20(x8)
 3d4:	00178793          	addi	x15,x15,1
 3d8:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 110; i++) {
 3dc:	fbc42783          	lw	x15,-68(x8)
 3e0:	00178793          	addi	x15,x15,1
 3e4:	faf42e23          	sw	x15,-68(x8)
 3e8:	fbc42703          	lw	x14,-68(x8)
 3ec:	06d00793          	addi	x15,x0,109
 3f0:	fee7d0e3          	bge	x15,x14,3d0 <main+0x31c>
 3f4:	4740006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 12) {
 3f8:	f6c42703          	lw	x14,-148(x8)
 3fc:	00c00793          	addi	x15,x0,12
 400:	02f71a63          	bne	x14,x15,434 <main+0x380>
        for (int i = 0; i < 120; i++) {
 404:	fa042c23          	sw	x0,-72(x8)
 408:	01c0006f          	jal	x0,424 <main+0x370>
            a = a + 1;
 40c:	fec42783          	lw	x15,-20(x8)
 410:	00178793          	addi	x15,x15,1
 414:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 120; i++) {
 418:	fb842783          	lw	x15,-72(x8)
 41c:	00178793          	addi	x15,x15,1
 420:	faf42c23          	sw	x15,-72(x8)
 424:	fb842703          	lw	x14,-72(x8)
 428:	07700793          	addi	x15,x0,119
 42c:	fee7d0e3          	bge	x15,x14,40c <main+0x358>
 430:	4380006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 13) {
 434:	f6c42703          	lw	x14,-148(x8)
 438:	00d00793          	addi	x15,x0,13
 43c:	02f71a63          	bne	x14,x15,470 <main+0x3bc>
        for (int i = 0; i < 130; i++) {
 440:	fa042a23          	sw	x0,-76(x8)
 444:	01c0006f          	jal	x0,460 <main+0x3ac>
            a = a + 1;
 448:	fec42783          	lw	x15,-20(x8)
 44c:	00178793          	addi	x15,x15,1
 450:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 130; i++) {
 454:	fb442783          	lw	x15,-76(x8)
 458:	00178793          	addi	x15,x15,1
 45c:	faf42a23          	sw	x15,-76(x8)
 460:	fb442703          	lw	x14,-76(x8)
 464:	08100793          	addi	x15,x0,129
 468:	fee7d0e3          	bge	x15,x14,448 <main+0x394>
 46c:	3fc0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 14) {
 470:	f6c42703          	lw	x14,-148(x8)
 474:	00e00793          	addi	x15,x0,14
 478:	02f71a63          	bne	x14,x15,4ac <main+0x3f8>
        for (int i = 0; i < 140; i++) {
 47c:	fa042823          	sw	x0,-80(x8)
 480:	01c0006f          	jal	x0,49c <main+0x3e8>
            a = a + 1;
 484:	fec42783          	lw	x15,-20(x8)
 488:	00178793          	addi	x15,x15,1
 48c:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 140; i++) {
 490:	fb042783          	lw	x15,-80(x8)
 494:	00178793          	addi	x15,x15,1
 498:	faf42823          	sw	x15,-80(x8)
 49c:	fb042703          	lw	x14,-80(x8)
 4a0:	08b00793          	addi	x15,x0,139
 4a4:	fee7d0e3          	bge	x15,x14,484 <main+0x3d0>
 4a8:	3c00006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 15) {
 4ac:	f6c42703          	lw	x14,-148(x8)
 4b0:	00f00793          	addi	x15,x0,15
 4b4:	02f71a63          	bne	x14,x15,4e8 <main+0x434>
        for (int i = 0; i < 150; i++) {
 4b8:	fa042623          	sw	x0,-84(x8)
 4bc:	01c0006f          	jal	x0,4d8 <main+0x424>
            a = a + 1;
 4c0:	fec42783          	lw	x15,-20(x8)
 4c4:	00178793          	addi	x15,x15,1
 4c8:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 150; i++) {
 4cc:	fac42783          	lw	x15,-84(x8)
 4d0:	00178793          	addi	x15,x15,1
 4d4:	faf42623          	sw	x15,-84(x8)
 4d8:	fac42703          	lw	x14,-84(x8)
 4dc:	09500793          	addi	x15,x0,149
 4e0:	fee7d0e3          	bge	x15,x14,4c0 <main+0x40c>
 4e4:	3840006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 16) {
 4e8:	f6c42703          	lw	x14,-148(x8)
 4ec:	01000793          	addi	x15,x0,16
 4f0:	02f71a63          	bne	x14,x15,524 <main+0x470>
        for (int i = 0; i < 160; i++) {
 4f4:	fa042423          	sw	x0,-88(x8)
 4f8:	01c0006f          	jal	x0,514 <main+0x460>
            a = a + 1;
 4fc:	fec42783          	lw	x15,-20(x8)
 500:	00178793          	addi	x15,x15,1
 504:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 160; i++) {
 508:	fa842783          	lw	x15,-88(x8)
 50c:	00178793          	addi	x15,x15,1
 510:	faf42423          	sw	x15,-88(x8)
 514:	fa842703          	lw	x14,-88(x8)
 518:	09f00793          	addi	x15,x0,159
 51c:	fee7d0e3          	bge	x15,x14,4fc <main+0x448>
 520:	3480006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 17) {
 524:	f6c42703          	lw	x14,-148(x8)
 528:	01100793          	addi	x15,x0,17
 52c:	02f71a63          	bne	x14,x15,560 <main+0x4ac>
        for (int i = 0; i < 170; i++) {
 530:	fa042223          	sw	x0,-92(x8)
 534:	01c0006f          	jal	x0,550 <main+0x49c>
            a = a + 1;
 538:	fec42783          	lw	x15,-20(x8)
 53c:	00178793          	addi	x15,x15,1
 540:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 170; i++) {
 544:	fa442783          	lw	x15,-92(x8)
 548:	00178793          	addi	x15,x15,1
 54c:	faf42223          	sw	x15,-92(x8)
 550:	fa442703          	lw	x14,-92(x8)
 554:	0a900793          	addi	x15,x0,169
 558:	fee7d0e3          	bge	x15,x14,538 <main+0x484>
 55c:	30c0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 18) {
 560:	f6c42703          	lw	x14,-148(x8)
 564:	01200793          	addi	x15,x0,18
 568:	02f71a63          	bne	x14,x15,59c <main+0x4e8>
        for (int i = 0; i < 180; i++) {
 56c:	fa042023          	sw	x0,-96(x8)
 570:	01c0006f          	jal	x0,58c <main+0x4d8>
            a = a + 1;
 574:	fec42783          	lw	x15,-20(x8)
 578:	00178793          	addi	x15,x15,1
 57c:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 180; i++) {
 580:	fa042783          	lw	x15,-96(x8)
 584:	00178793          	addi	x15,x15,1
 588:	faf42023          	sw	x15,-96(x8)
 58c:	fa042703          	lw	x14,-96(x8)
 590:	0b300793          	addi	x15,x0,179
 594:	fee7d0e3          	bge	x15,x14,574 <main+0x4c0>
 598:	2d00006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 19) {
 59c:	f6c42703          	lw	x14,-148(x8)
 5a0:	01300793          	addi	x15,x0,19
 5a4:	02f71a63          	bne	x14,x15,5d8 <main+0x524>
        for (int i = 0; i < 190; i++) {
 5a8:	f8042e23          	sw	x0,-100(x8)
 5ac:	01c0006f          	jal	x0,5c8 <main+0x514>
            a = a + 1;
 5b0:	fec42783          	lw	x15,-20(x8)
 5b4:	00178793          	addi	x15,x15,1
 5b8:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 190; i++) {
 5bc:	f9c42783          	lw	x15,-100(x8)
 5c0:	00178793          	addi	x15,x15,1
 5c4:	f8f42e23          	sw	x15,-100(x8)
 5c8:	f9c42703          	lw	x14,-100(x8)
 5cc:	0bd00793          	addi	x15,x0,189
 5d0:	fee7d0e3          	bge	x15,x14,5b0 <main+0x4fc>
 5d4:	2940006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 20) {
 5d8:	f6c42703          	lw	x14,-148(x8)
 5dc:	01400793          	addi	x15,x0,20
 5e0:	02f71a63          	bne	x14,x15,614 <main+0x560>
        for (int i = 0; i < 200; i++) {
 5e4:	f8042c23          	sw	x0,-104(x8)
 5e8:	01c0006f          	jal	x0,604 <main+0x550>
            a = a + 1;
 5ec:	fec42783          	lw	x15,-20(x8)
 5f0:	00178793          	addi	x15,x15,1
 5f4:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 200; i++) {
 5f8:	f9842783          	lw	x15,-104(x8)
 5fc:	00178793          	addi	x15,x15,1
 600:	f8f42c23          	sw	x15,-104(x8)
 604:	f9842703          	lw	x14,-104(x8)
 608:	0c700793          	addi	x15,x0,199
 60c:	fee7d0e3          	bge	x15,x14,5ec <main+0x538>
 610:	2580006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 21) {
 614:	f6c42703          	lw	x14,-148(x8)
 618:	01500793          	addi	x15,x0,21
 61c:	02f71a63          	bne	x14,x15,650 <main+0x59c>
        for (int i = 0; i < 210; i++) {
 620:	f8042a23          	sw	x0,-108(x8)
 624:	01c0006f          	jal	x0,640 <main+0x58c>
            a = a + 1;
 628:	fec42783          	lw	x15,-20(x8)
 62c:	00178793          	addi	x15,x15,1
 630:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 210; i++) {
 634:	f9442783          	lw	x15,-108(x8)
 638:	00178793          	addi	x15,x15,1
 63c:	f8f42a23          	sw	x15,-108(x8)
 640:	f9442703          	lw	x14,-108(x8)
 644:	0d100793          	addi	x15,x0,209
 648:	fee7d0e3          	bge	x15,x14,628 <main+0x574>
 64c:	21c0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 22) {
 650:	f6c42703          	lw	x14,-148(x8)
 654:	01600793          	addi	x15,x0,22
 658:	02f71a63          	bne	x14,x15,68c <main+0x5d8>
        for (int i = 0; i < 220; i++) {
 65c:	f8042823          	sw	x0,-112(x8)
 660:	01c0006f          	jal	x0,67c <main+0x5c8>
            a = a + 1;
 664:	fec42783          	lw	x15,-20(x8)
 668:	00178793          	addi	x15,x15,1
 66c:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 220; i++) {
 670:	f9042783          	lw	x15,-112(x8)
 674:	00178793          	addi	x15,x15,1
 678:	f8f42823          	sw	x15,-112(x8)
 67c:	f9042703          	lw	x14,-112(x8)
 680:	0db00793          	addi	x15,x0,219
 684:	fee7d0e3          	bge	x15,x14,664 <main+0x5b0>
 688:	1e00006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 23) {
 68c:	f6c42703          	lw	x14,-148(x8)
 690:	01700793          	addi	x15,x0,23
 694:	02f71a63          	bne	x14,x15,6c8 <main+0x614>
        for (int i = 0; i < 230; i++) {
 698:	f8042623          	sw	x0,-116(x8)
 69c:	01c0006f          	jal	x0,6b8 <main+0x604>
            a = a + 1;
 6a0:	fec42783          	lw	x15,-20(x8)
 6a4:	00178793          	addi	x15,x15,1
 6a8:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 230; i++) {
 6ac:	f8c42783          	lw	x15,-116(x8)
 6b0:	00178793          	addi	x15,x15,1
 6b4:	f8f42623          	sw	x15,-116(x8)
 6b8:	f8c42703          	lw	x14,-116(x8)
 6bc:	0e500793          	addi	x15,x0,229
 6c0:	fee7d0e3          	bge	x15,x14,6a0 <main+0x5ec>
 6c4:	1a40006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 24) {
 6c8:	f6c42703          	lw	x14,-148(x8)
 6cc:	01800793          	addi	x15,x0,24
 6d0:	02f71a63          	bne	x14,x15,704 <main+0x650>
        for (int i = 0; i < 240; i++) {
 6d4:	f8042423          	sw	x0,-120(x8)
 6d8:	01c0006f          	jal	x0,6f4 <main+0x640>
            a = a + 1;
 6dc:	fec42783          	lw	x15,-20(x8)
 6e0:	00178793          	addi	x15,x15,1
 6e4:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 240; i++) {
 6e8:	f8842783          	lw	x15,-120(x8)
 6ec:	00178793          	addi	x15,x15,1
 6f0:	f8f42423          	sw	x15,-120(x8)
 6f4:	f8842703          	lw	x14,-120(x8)
 6f8:	0ef00793          	addi	x15,x0,239
 6fc:	fee7d0e3          	bge	x15,x14,6dc <main+0x628>
 700:	1680006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 25) {
 704:	f6c42703          	lw	x14,-148(x8)
 708:	01900793          	addi	x15,x0,25
 70c:	02f71a63          	bne	x14,x15,740 <main+0x68c>
        for (int i = 0; i < 250; i++) {
 710:	f8042223          	sw	x0,-124(x8)
 714:	01c0006f          	jal	x0,730 <main+0x67c>
            a = a + 1;
 718:	fec42783          	lw	x15,-20(x8)
 71c:	00178793          	addi	x15,x15,1
 720:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 250; i++) {
 724:	f8442783          	lw	x15,-124(x8)
 728:	00178793          	addi	x15,x15,1
 72c:	f8f42223          	sw	x15,-124(x8)
 730:	f8442703          	lw	x14,-124(x8)
 734:	0f900793          	addi	x15,x0,249
 738:	fee7d0e3          	bge	x15,x14,718 <main+0x664>
 73c:	12c0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 26) {
 740:	f6c42703          	lw	x14,-148(x8)
 744:	01a00793          	addi	x15,x0,26
 748:	02f71a63          	bne	x14,x15,77c <main+0x6c8>
        for (int i = 0; i < 260; i++) {
 74c:	f8042023          	sw	x0,-128(x8)
 750:	01c0006f          	jal	x0,76c <main+0x6b8>
            a = a + 1;
 754:	fec42783          	lw	x15,-20(x8)
 758:	00178793          	addi	x15,x15,1
 75c:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 260; i++) {
 760:	f8042783          	lw	x15,-128(x8)
 764:	00178793          	addi	x15,x15,1
 768:	f8f42023          	sw	x15,-128(x8)
 76c:	f8042703          	lw	x14,-128(x8)
 770:	10300793          	addi	x15,x0,259
 774:	fee7d0e3          	bge	x15,x14,754 <main+0x6a0>
 778:	0f00006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 27) {
 77c:	f6c42703          	lw	x14,-148(x8)
 780:	01b00793          	addi	x15,x0,27
 784:	02f71a63          	bne	x14,x15,7b8 <main+0x704>
        for (int i = 0; i < 270; i++) {
 788:	f6042e23          	sw	x0,-132(x8)
 78c:	01c0006f          	jal	x0,7a8 <main+0x6f4>
            a = a + 1;
 790:	fec42783          	lw	x15,-20(x8)
 794:	00178793          	addi	x15,x15,1
 798:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 270; i++) {
 79c:	f7c42783          	lw	x15,-132(x8)
 7a0:	00178793          	addi	x15,x15,1
 7a4:	f6f42e23          	sw	x15,-132(x8)
 7a8:	f7c42703          	lw	x14,-132(x8)
 7ac:	10d00793          	addi	x15,x0,269
 7b0:	fee7d0e3          	bge	x15,x14,790 <main+0x6dc>
 7b4:	0b40006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 28) {
 7b8:	f6c42703          	lw	x14,-148(x8)
 7bc:	01c00793          	addi	x15,x0,28
 7c0:	02f71a63          	bne	x14,x15,7f4 <main+0x740>
        for (int i = 0; i < 280; i++) {
 7c4:	f6042c23          	sw	x0,-136(x8)
 7c8:	01c0006f          	jal	x0,7e4 <main+0x730>
            a = a + 1;
 7cc:	fec42783          	lw	x15,-20(x8)
 7d0:	00178793          	addi	x15,x15,1
 7d4:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 280; i++) {
 7d8:	f7842783          	lw	x15,-136(x8)
 7dc:	00178793          	addi	x15,x15,1
 7e0:	f6f42c23          	sw	x15,-136(x8)
 7e4:	f7842703          	lw	x14,-136(x8)
 7e8:	11700793          	addi	x15,x0,279
 7ec:	fee7d0e3          	bge	x15,x14,7cc <main+0x718>
 7f0:	0780006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 29) {
 7f4:	f6c42703          	lw	x14,-148(x8)
 7f8:	01d00793          	addi	x15,x0,29
 7fc:	02f71a63          	bne	x14,x15,830 <main+0x77c>
        for (int i = 0; i < 290; i++) {
 800:	f6042a23          	sw	x0,-140(x8)
 804:	01c0006f          	jal	x0,820 <main+0x76c>
            a = a + 1;
 808:	fec42783          	lw	x15,-20(x8)
 80c:	00178793          	addi	x15,x15,1
 810:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 290; i++) {
 814:	f7442783          	lw	x15,-140(x8)
 818:	00178793          	addi	x15,x15,1
 81c:	f6f42a23          	sw	x15,-140(x8)
 820:	f7442703          	lw	x14,-140(x8)
 824:	12100793          	addi	x15,x0,289
 828:	fee7d0e3          	bge	x15,x14,808 <main+0x754>
 82c:	03c0006f          	jal	x0,868 <main+0x7b4>
        }
    } else if (b == 30) {
 830:	f6c42703          	lw	x14,-148(x8)
 834:	01e00793          	addi	x15,x0,30
 838:	02f71863          	bne	x14,x15,868 <main+0x7b4>
        for (int i = 0; i < 300; i++) {
 83c:	f6042823          	sw	x0,-144(x8)
 840:	01c0006f          	jal	x0,85c <main+0x7a8>
            a = a + 1;
 844:	fec42783          	lw	x15,-20(x8)
 848:	00178793          	addi	x15,x15,1
 84c:	fef42623          	sw	x15,-20(x8)
        for (int i = 0; i < 300; i++) {
 850:	f7042783          	lw	x15,-144(x8)
 854:	00178793          	addi	x15,x15,1
 858:	f6f42823          	sw	x15,-144(x8)
 85c:	f7042703          	lw	x14,-144(x8)
 860:	12b00793          	addi	x15,x0,299
 864:	fee7d0e3          	bge	x15,x14,844 <main+0x790>
        }
    }


    return 0;
 868:	00000793          	addi	x15,x0,0
}
 86c:	00078513          	addi	x10,x15,0
 870:	09c12403          	lw	x8,156(x2)
 874:	0a010113          	addi	x2,x2,160
 878:	00008067          	jalr	x0,0(x1)
	...

Disassembly of section .bss:

000008c0 <hardware_data>:
	...

00000be0 <memory_data>:
	...

Disassembly of section .riscv.attributes:

00000000 <.riscv.attributes>:
    nop
   0:	2041                	c.jal	80 <crt+0x80>
   2:	0000                	c.unimp
    la ra, exit
   4:	7200                	c.flw	f8,32(x12)
   6:	7369                	c.lui	x6,0xffffa
   8:	01007663          	bgeu	x0,x16,14 <crt+0x14>
    la sp, _sp
   c:	0016                	c.slli	x0,0x5
   e:	0000                	c.unimp
  10:	1004                	c.addi4spn	x9,x2,32
  12:	7205                	c.lui	x4,0xfffe1
    mv s0, sp
  14:	3376                	c.fldsp	f6,376(x2)
  16:	6932                	c.flwsp	f18,12(x2)
    la gp, __global_pointer$
  18:	7032                	c.flwsp	f0,44(x2)
  1a:	5f30                	c.lw	x12,120(x14)
  1c:	326d                	c.jal	fffff9c6 <_sp+0xfffef9c6>
  1e:	3070                	c.fld	f12,224(x8)
	...

Disassembly of section .comment:

00000000 <.comment>:
    nop
   0:	3a434347          	fmsub.d	f6,f6,f4,f7,rmm
    la ra, exit
   4:	2820                	c.fld	f8,80(x8)
   6:	29554e47          	fmsub.s	f28,f10,f21,f5,rmm
   a:	3920                	c.fld	f8,112(x10)
    la sp, _sp
   c:	322e                	c.fldsp	f4,232(x2)
   e:	302e                	c.fldsp	f0,232(x2)
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
    nop
   0:	011d                	c.addi	x2,7
   2:	0000                	c.unimp
    la ra, exit
   4:	00250003          	lb	x0,2(x10)
   8:	0000                	c.unimp
   a:	0101                	c.addi	x2,0
    la sp, _sp
   c:	000d0efb          	0xd0efb
  10:	0101                	c.addi	x2,0
  12:	0101                	c.addi	x2,0
    mv s0, sp
  14:	0000                	c.unimp
  16:	0100                	c.addi4spn	x8,x2,128
    la gp, __global_pointer$
  18:	0000                	c.unimp
  1a:	7001                	c.lui	x0,0xfffe0
  1c:	6f72                	c.flwsp	f30,28(x2)
  1e:	6d617267          	0x6d617267
    li tp, 0
  22:	63000073          	0x63000073
    li t0, 0
  26:	7472                	c.flwsp	f8,60(x2)
    li t1, 0
  28:	732e                	c.flwsp	f6,232(x2)
  2a:	0100                	c.addi4spn	x8,x2,128
    li t2, 0
  2c:	0000                	c.unimp
  2e:	0000                	c.unimp
    li s1, 0
  30:	0205                	c.addi	x4,1
  32:	0000                	c.unimp
    li a0, 0
  34:	0000                	c.unimp
  36:	03010d03          	lb	x26,48(x2)
    li a1, 0
  3a:	0901                	c.addi	x18,0
    li a2, 0
  3c:	0004                	0x4
  3e:	0301                	c.addi	x6,0
    li a3, 0
  40:	0901                	c.addi	x18,0
  42:	0008                	0x8
    li a4, 0
  44:	0301                	c.addi	x6,0
  46:	0901                	c.addi	x18,0
    li a5, 0
  48:	0008                	0x8
  4a:	0301                	c.addi	x6,0
    li a6, 0
  4c:	0901                	c.addi	x18,0
  4e:	0004                	0x4
    li a7, 0
  50:	0301                	c.addi	x6,0
  52:	0901                	c.addi	x18,0
    li s2, 0
  54:	0008                	0x8
  56:	0301                	c.addi	x6,0
    li s3, 0
  58:	0901                	c.addi	x18,0
  5a:	0004                	0x4
    li s4, 0
  5c:	0301                	c.addi	x6,0
  5e:	0901                	c.addi	x18,0
    li s5, 0
  60:	0004                	0x4
  62:	0301                	c.addi	x6,0
    li s6, 0
  64:	0901                	c.addi	x18,0
  66:	0004                	0x4
    li s7, 0
  68:	0301                	c.addi	x6,0
  6a:	0901                	c.addi	x18,0
    li s8, 0
  6c:	0004                	0x4
  6e:	0301                	c.addi	x6,0
    li s9, 0
  70:	0901                	c.addi	x18,0
  72:	0004                	0x4
    li s10, 0
  74:	0301                	c.addi	x6,0
  76:	0901                	c.addi	x18,0
    li s11, 0
  78:	0004                	0x4
  7a:	0301                	c.addi	x6,0
    li t3, 0
  7c:	0901                	c.addi	x18,0
  7e:	0004                	0x4
    li t4, 0
  80:	0301                	c.addi	x6,0
  82:	0901                	c.addi	x18,0
    li t5, 0
  84:	0004                	0x4
  86:	0301                	c.addi	x6,0
    li t6, 0
  88:	0901                	c.addi	x18,0
  8a:	0004                	0x4
    j main
  8c:	0301                	c.addi	x6,0
  8e:	0901                	c.addi	x18,0
  90:	0004                	0x4
  92:	0301                	c.addi	x6,0
  94:	0901                	c.addi	x18,0
  96:	0004                	0x4
  98:	0301                	c.addi	x6,0
  9a:	0901                	c.addi	x18,0
  9c:	0004                	0x4
  9e:	0301                	c.addi	x6,0
    la sp, _sp
  a0:	0901                	c.addi	x18,0
  a2:	0004                	0x4
  a4:	0301                	c.addi	x6,0
  a6:	0901                	c.addi	x18,0
    sw a0, -8(sp)
  a8:	0004                	0x4
  aa:	0301                	c.addi	x6,0
    nop
  ac:	0901                	c.addi	x18,0
  ae:	0004                	0x4
    wfi
  b0:	0301                	c.addi	x6,0
  b2:	0901                	c.addi	x18,0
{
  b4:	0004                	0x4
  b6:	0301                	c.addi	x6,0
  b8:	0901                	c.addi	x18,0
  ba:	0004                	0x4
  bc:	0301                	c.addi	x6,0
  be:	0901                	c.addi	x18,0
    for (int i = 0; i < 200; i++) {
  c0:	0004                	0x4
  c2:	0301                	c.addi	x6,0
  c4:	0901                	c.addi	x18,0
  c6:	0004                	0x4
        memory_data[i] = (unsigned int)(i % 30);
  c8:	0301                	c.addi	x6,0
  ca:	0901                	c.addi	x18,0
  cc:	0004                	0x4
  ce:	0301                	c.addi	x6,0
  d0:	0901                	c.addi	x18,0
  d2:	0004                	0x4
  d4:	0301                	c.addi	x6,0
  d6:	0901                	c.addi	x18,0
  d8:	0004                	0x4
  da:	0301                	c.addi	x6,0
  dc:	0901                	c.addi	x18,0
  de:	0004                	0x4
  e0:	0301                	c.addi	x6,0
  e2:	0901                	c.addi	x18,0
  e4:	0004                	0x4
  e6:	0301                	c.addi	x6,0
  e8:	0901                	c.addi	x18,0
  ea:	0004                	0x4
  ec:	0301                	c.addi	x6,0
  ee:	0901                	c.addi	x18,0
  f0:	0004                	0x4
  f2:	0301                	c.addi	x6,0
  f4:	0901                	c.addi	x18,0
  f6:	0004                	0x4
  f8:	0901                	c.addi	x18,0
  fa:	0004                	0x4
  fc:	0100                	c.addi4spn	x8,x2,128
  fe:	0001                	c.addi	x0,0
 100:	0205                	c.addi	x4,1
 102:	00a0                	c.addi4spn	x8,x2,72
 104:	0000                	c.unimp
 106:	03013303          	0x3013303
 10a:	0901                	c.addi	x18,0
 10c:	0008                	0x8
 10e:	0301                	c.addi	x6,0
 110:	0901                	c.addi	x18,0
 112:	0004                	0x4
 114:	0301                	c.addi	x6,0
 116:	0901                	c.addi	x18,0
 118:	0004                	0x4
 11a:	0901                	c.addi	x18,0
    for (int i = 0; i < 200; i++) {
 11c:	0004                	0x4
 11e:	0100                	c.addi4spn	x8,x2,128
 120:	c701                	c.beqz	x14,128 <main+0x74>
 122:	0008                	0x8
 124:	0300                	c.addi4spn	x8,x2,384
 126:	3d00                	c.fld	f8,56(x10)
 128:	0001                	c.addi	x0,0
 12a:	0100                	c.addi4spn	x8,x2,128
 12c:	fb01                	c.bnez	x14,3c <crt+0x3c>
 12e:	0d0e                	c.slli	x26,0x3
 130:	0100                	c.addi4spn	x8,x2,128
 132:	0101                	c.addi	x2,0
    a = 0;
 134:	0001                	c.addi	x0,0
 136:	0000                	c.unimp
    b = 20;
 138:	0001                	c.addi	x0,0
 13a:	0100                	c.addi4spn	x8,x2,128
 13c:	7270                	c.flw	f12,100(x12)
 13e:	6172676f          	jal	x14,26f54 <_sp+0x16f54>
    if (b == 1) {
 142:	736d                	c.lui	x6,0xffffb
 144:	2f00                	c.fld	f8,24(x14)
 146:	6661                	c.lui	x12,0x18
 148:	65652f73          	csrrs	x30,0x656,x10
        for (int i = 0; i < 50; i++) {
 14c:	752e7363          	bgeu	x28,x18,892 <main+0x7de>
 150:	696d                	c.lui	x18,0x1b
 152:	652e6863          	bltu	x28,x18,7a2 <main+0x6ee>
            hardware_data[i] = memory_data[i];
 156:	7564                	c.flw	f9,108(x10)
 158:	666f732f          	0x666f732f
 15c:	2f74                	c.fld	f13,216(x14)
 15e:	6d75                	c.lui	x26,0x1d
 160:	7369722f          	0x7369722f
 164:	392d7663          	bgeu	x26,x18,4f0 <main+0x43c>
 168:	322e                	c.fldsp	f4,232(x2)
 16a:	62696c2f          	0x62696c2f
 16e:	6363672f          	0x6363672f
 172:	7369722f          	0x7369722f
 176:	34367663          	bgeu	x12,x3,4c2 <main+0x40e>
 17a:	752d                	c.lui	x10,0xfffeb
 17c:	6b6e                	c.flwsp	f22,216(x2)
 17e:	6f6e                	c.flwsp	f30,216(x2)
 180:	652d6e77          	0x652d6e77
        for (int i = 0; i < 50; i++) {
 184:	666c                	c.flw	f11,76(x12)
 186:	322e392f          	0x322e392f
 18a:	302e                	c.fldsp	f0,232(x2)
 18c:	636e692f          	0x636e692f
 190:	756c                	c.flw	f11,108(x10)
 192:	6564                	c.flw	f9,76(x10)
 194:	2f00                	c.fld	f8,24(x14)
 196:	6661                	c.lui	x12,0x18
 198:	65652f73          	csrrs	x30,0x656,x10
 19c:	752e7363          	bgeu	x28,x18,8e2 <hardware_data+0x22>
    } else if (b == 2) {
 1a0:	696d                	c.lui	x18,0x1b
 1a2:	652e6863          	bltu	x28,x18,7f2 <main+0x73e>
 1a6:	7564                	c.flw	f9,108(x10)
 1a8:	666f732f          	0x666f732f
        for (int i = 0; i < 10; i++) {
 1ac:	2f74                	c.fld	f13,216(x14)
 1ae:	6d75                	c.lui	x26,0x1d
 1b0:	7369722f          	0x7369722f
            a = a + 1;
 1b4:	392d7663          	bgeu	x26,x18,540 <main+0x48c>
 1b8:	322e                	c.fldsp	f4,232(x2)
 1ba:	7369722f          	0x7369722f
 1be:	34367663          	bgeu	x12,x3,50a <main+0x456>
        for (int i = 0; i < 10; i++) {
 1c2:	752d                	c.lui	x10,0xfffeb
 1c4:	6b6e                	c.flwsp	f22,216(x2)
 1c6:	6f6e                	c.flwsp	f30,216(x2)
 1c8:	652d6e77          	0x652d6e77
 1cc:	666c                	c.flw	f11,76(x12)
 1ce:	636e692f          	0x636e692f
 1d2:	756c                	c.flw	f11,108(x10)
 1d4:	6564                	c.flw	f9,76(x10)
 1d6:	7379732f          	0x7379732f
 1da:	2f00                	c.fld	f8,24(x14)
    } else if (b == 3) {
 1dc:	6661                	c.lui	x12,0x18
 1de:	65652f73          	csrrs	x30,0x656,x10
 1e2:	752e7363          	bgeu	x28,x18,928 <hardware_data+0x68>
 1e6:	696d                	c.lui	x18,0x1b
        for (int i = 0; i < 10; i++) {
 1e8:	652e6863          	bltu	x28,x18,838 <main+0x784>
 1ec:	7564                	c.flw	f9,108(x10)
 1ee:	666f732f          	0x666f732f
            a = a + 1;
 1f2:	2f74                	c.fld	f13,216(x14)
 1f4:	6d75                	c.lui	x26,0x1d
 1f6:	7369722f          	0x7369722f
 1fa:	392d7663          	bgeu	x26,x18,586 <main+0x4d2>
        for (int i = 0; i < 10; i++) {
 1fe:	322e                	c.fldsp	f4,232(x2)
 200:	7369722f          	0x7369722f
 204:	34367663          	bgeu	x12,x3,550 <main+0x49c>
 208:	752d                	c.lui	x10,0xfffeb
 20a:	6b6e                	c.flwsp	f22,216(x2)
 20c:	6f6e                	c.flwsp	f30,216(x2)
 20e:	652d6e77          	0x652d6e77
 212:	666c                	c.flw	f11,76(x12)
 214:	636e692f          	0x636e692f
    } else if (b == 4) {
 218:	756c                	c.flw	f11,108(x10)
 21a:	6564                	c.flw	f9,76(x10)
 21c:	0000                	c.unimp
 21e:	65686373          	csrrsi	x6,0x656,16
 222:	7564                	c.flw	f9,108(x10)
        for (int i = 0; i < 100; i++) {
 224:	656c                	c.flw	f11,76(x10)
 226:	3472                	c.fldsp	f8,312(x2)
 228:	632e                	c.flwsp	f6,200(x2)
 22a:	0100                	c.addi4spn	x8,x2,128
            a = a + 1;
 22c:	0000                	c.unimp
 22e:	64647473          	csrrci	x8,0x646,8
 232:	6665                	c.lui	x12,0x19
 234:	682e                	c.flwsp	f16,200(x2)
 236:	0200                	c.addi4spn	x8,x2,256
        for (int i = 0; i < 100; i++) {
 238:	0000                	c.unimp
 23a:	745f 7079 7365      	0x73657079745f
 240:	682e                	c.flwsp	f16,200(x2)
 242:	0300                	c.addi4spn	x8,x2,384
 244:	0000                	c.unimp
 246:	6572                	c.flwsp	f10,28(x2)
 248:	6e65                	c.lui	x28,0x19
 24a:	2e74                	c.fld	f13,216(x12)
 24c:	0068                	c.addi4spn	x10,x2,12
 24e:	6c000003          	lb	x0,1728(x0) # 6c0 <main+0x60c>
 252:	2e6b636f          	jal	x6,b6538 <_sp+0xa6538>
    } else if (b == 5) {
 256:	0068                	c.addi4spn	x10,x2,12
 258:	73000003          	lb	x0,1840(x0) # 730 <main+0x67c>
 25c:	6474                	c.flw	f13,76(x8)
 25e:	696c                	c.flw	f11,84(x10)
        for (int i = 0; i < 50; i++) {
 260:	2e62                	c.fldsp	f28,24(x2)
 262:	0068                	c.addi4spn	x10,x2,12
 264:	0004                	0x4
 266:	0000                	c.unimp
            a = a + 1;
 268:	0105                	c.addi	x2,1
 26a:	0500                	c.addi4spn	x8,x2,640
 26c:	b402                	c.fsdsp	f0,40(x2)
 26e:	0000                	c.unimp
 270:	0300                	c.addi4spn	x8,x2,384
 272:	0e05010f          	0xe05010f
        for (int i = 0; i < 50; i++) {
 276:	0c090603          	lb	x12,192(x18) # 1b0c0 <_sp+0xb0c0>
 27a:	0100                	c.addi4spn	x8,x2,128
 27c:	0505                	c.addi	x10,1
 27e:	04090003          	lb	x0,64(x18)
 282:	0100                	c.addi4spn	x8,x2,128
 284:	2b05                	c.jal	7b4 <main+0x700>
 286:	0200                	c.addi4spn	x8,x2,256
 288:	0304                	c.addi4spn	x9,x2,384
 28a:	04090103          	lb	x2,64(x18)
 28e:	0100                	c.addi4spn	x8,x2,128
    } else if (b == 6) {
 290:	1805                	c.addi	x16,-31
 292:	0200                	c.addi4spn	x8,x2,256
 294:	0304                	c.addi4spn	x9,x2,384
 296:	3c090003          	lb	x0,960(x18)
 29a:	0100                	c.addi4spn	x8,x2,128
        for (int i = 0; i < 60; i++) {
 29c:	1f05                	c.addi	x30,-31
 29e:	0200                	c.addi4spn	x8,x2,256
 2a0:	0304                	c.addi4spn	x9,x2,384
 2a2:	18097f03          	0x18097f03
            a = a + 1;
 2a6:	0100                	c.addi4spn	x8,x2,128
 2a8:	0505                	c.addi	x10,1
 2aa:	0200                	c.addi4spn	x8,x2,256
 2ac:	0104                	c.addi4spn	x9,x2,128
 2ae:	0c090003          	lb	x0,192(x18)
        for (int i = 0; i < 60; i++) {
 2b2:	0100                	c.addi4spn	x8,x2,128
 2b4:	0705                	c.addi	x14,1
 2b6:	0c090803          	lb	x16,192(x18)
 2ba:	0100                	c.addi4spn	x8,x2,128
 2bc:	04090103          	lb	x2,64(x18)
 2c0:	0100                	c.addi4spn	x8,x2,128
 2c2:	0805                	c.addi	x16,1
 2c4:	08090203          	lb	x4,128(x18)
 2c8:	0100                	c.addi4spn	x8,x2,128
 2ca:	1205                	c.addi	x4,-31
    } else if (b == 7) {
 2cc:	0c090103          	lb	x2,192(x18)
 2d0:	0100                	c.addi4spn	x8,x2,128
 2d2:	0905                	c.addi	x18,1
 2d4:	04090003          	lb	x0,64(x18)
        for (int i = 0; i < 70; i++) {
 2d8:	0100                	c.addi4spn	x8,x2,128
 2da:	2b05                	c.jal	80a <main+0x756>
 2dc:	0200                	c.addi4spn	x8,x2,256
 2de:	0304                	c.addi4spn	x9,x2,384
            a = a + 1;
 2e0:	04090103          	lb	x2,64(x18)
 2e4:	0100                	c.addi4spn	x8,x2,128
 2e6:	1e05                	c.addi	x28,-31
 2e8:	0200                	c.addi4spn	x8,x2,256
 2ea:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 70; i++) {
 2ec:	18090003          	lb	x0,384(x18)
 2f0:	0100                	c.addi4spn	x8,x2,128
 2f2:	2205                	c.jal	412 <main+0x35e>
 2f4:	0200                	c.addi4spn	x8,x2,256
 2f6:	0304                	c.addi4spn	x9,x2,384
 2f8:	18097f03          	0x18097f03
 2fc:	0100                	c.addi4spn	x8,x2,128
 2fe:	0905                	c.addi	x18,1
 300:	0200                	c.addi4spn	x8,x2,256
 302:	0104                	c.addi4spn	x9,x2,128
 304:	0c090003          	lb	x0,192(x18)
    } else if (b == 8) {
 308:	0100                	c.addi4spn	x8,x2,128
 30a:	0f05                	c.addi	x30,1
 30c:	10090303          	lb	x6,256(x18)
 310:	0100                	c.addi4spn	x8,x2,128
 312:	1205                	c.addi	x4,-31
        for (int i = 0; i < 80; i++) {
 314:	0c090103          	lb	x2,192(x18)
 318:	0100                	c.addi4spn	x8,x2,128
 31a:	0905                	c.addi	x18,1
            a = a + 1;
 31c:	04090003          	lb	x0,64(x18)
 320:	0100                	c.addi4spn	x8,x2,128
 322:	0f05                	c.addi	x30,1
 324:	0200                	c.addi4spn	x8,x2,256
 326:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 80; i++) {
 328:	04090103          	lb	x2,64(x18)
 32c:	0100                	c.addi4spn	x8,x2,128
 32e:	2205                	c.jal	44e <main+0x39a>
 330:	0200                	c.addi4spn	x8,x2,256
 332:	0304                	c.addi4spn	x9,x2,384
 334:	0c097f03          	0xc097f03
 338:	0100                	c.addi4spn	x8,x2,128
 33a:	0905                	c.addi	x18,1
 33c:	0200                	c.addi4spn	x8,x2,256
 33e:	0104                	c.addi4spn	x9,x2,128
 340:	0c090003          	lb	x0,192(x18)
    } else if (b == 9) {
 344:	0100                	c.addi4spn	x8,x2,128
 346:	0f05                	c.addi	x30,1
 348:	10090303          	lb	x6,256(x18)
 34c:	0100                	c.addi4spn	x8,x2,128
 34e:	1205                	c.addi	x4,-31
        for (int i = 0; i < 90; i++) {
 350:	0c090103          	lb	x2,192(x18)
 354:	0100                	c.addi4spn	x8,x2,128
 356:	0905                	c.addi	x18,1
            a = a + 1;
 358:	04090003          	lb	x0,64(x18)
 35c:	0100                	c.addi4spn	x8,x2,128
 35e:	0f05                	c.addi	x30,1
 360:	0200                	c.addi4spn	x8,x2,256
 362:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 90; i++) {
 364:	04090103          	lb	x2,64(x18)
 368:	0100                	c.addi4spn	x8,x2,128
 36a:	2205                	c.jal	48a <main+0x3d6>
 36c:	0200                	c.addi4spn	x8,x2,256
 36e:	0304                	c.addi4spn	x9,x2,384
 370:	0c097f03          	0xc097f03
 374:	0100                	c.addi4spn	x8,x2,128
 376:	0905                	c.addi	x18,1
 378:	0200                	c.addi4spn	x8,x2,256
 37a:	0104                	c.addi4spn	x9,x2,128
 37c:	0c090003          	lb	x0,192(x18)
    } else if (b == 10) {
 380:	0100                	c.addi4spn	x8,x2,128
 382:	0f05                	c.addi	x30,1
 384:	10090303          	lb	x6,256(x18)
 388:	0100                	c.addi4spn	x8,x2,128
 38a:	1205                	c.addi	x4,-31
        for (int i = 0; i < 100; i++) {
 38c:	0c090103          	lb	x2,192(x18)
 390:	0100                	c.addi4spn	x8,x2,128
 392:	0905                	c.addi	x18,1
            a = a + 1;
 394:	04090003          	lb	x0,64(x18)
 398:	0100                	c.addi4spn	x8,x2,128
 39a:	0f05                	c.addi	x30,1
 39c:	0200                	c.addi4spn	x8,x2,256
 39e:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 100; i++) {
 3a0:	04090103          	lb	x2,64(x18)
 3a4:	0100                	c.addi4spn	x8,x2,128
 3a6:	2305                	c.jal	8c6 <hardware_data+0x6>
 3a8:	0200                	c.addi4spn	x8,x2,256
 3aa:	0304                	c.addi4spn	x9,x2,384
 3ac:	0c097f03          	0xc097f03
 3b0:	0100                	c.addi4spn	x8,x2,128
 3b2:	0905                	c.addi	x18,1
 3b4:	0200                	c.addi4spn	x8,x2,256
 3b6:	0104                	c.addi4spn	x9,x2,128
 3b8:	0c090003          	lb	x0,192(x18)
    } else if (b == 11) {
 3bc:	0100                	c.addi4spn	x8,x2,128
 3be:	0f05                	c.addi	x30,1
 3c0:	10090303          	lb	x6,256(x18)
 3c4:	0100                	c.addi4spn	x8,x2,128
 3c6:	1205                	c.addi	x4,-31
        for (int i = 0; i < 110; i++) {
 3c8:	0c090103          	lb	x2,192(x18)
 3cc:	0100                	c.addi4spn	x8,x2,128
 3ce:	0905                	c.addi	x18,1
            a = a + 1;
 3d0:	04090003          	lb	x0,64(x18)
 3d4:	0100                	c.addi4spn	x8,x2,128
 3d6:	0f05                	c.addi	x30,1
 3d8:	0200                	c.addi4spn	x8,x2,256
 3da:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 110; i++) {
 3dc:	04090103          	lb	x2,64(x18)
 3e0:	0100                	c.addi4spn	x8,x2,128
 3e2:	2205                	c.jal	502 <main+0x44e>
 3e4:	0200                	c.addi4spn	x8,x2,256
 3e6:	0304                	c.addi4spn	x9,x2,384
 3e8:	0c097f03          	0xc097f03
 3ec:	0100                	c.addi4spn	x8,x2,128
 3ee:	0905                	c.addi	x18,1
 3f0:	0200                	c.addi4spn	x8,x2,256
 3f2:	0104                	c.addi4spn	x9,x2,128
 3f4:	0c090003          	lb	x0,192(x18)
    } else if (b == 12) {
 3f8:	0100                	c.addi4spn	x8,x2,128
 3fa:	0f05                	c.addi	x30,1
 3fc:	10090303          	lb	x6,256(x18)
 400:	0100                	c.addi4spn	x8,x2,128
 402:	1205                	c.addi	x4,-31
        for (int i = 0; i < 120; i++) {
 404:	0c090103          	lb	x2,192(x18)
 408:	0100                	c.addi4spn	x8,x2,128
 40a:	0905                	c.addi	x18,1
            a = a + 1;
 40c:	04090003          	lb	x0,64(x18)
 410:	0100                	c.addi4spn	x8,x2,128
 412:	0f05                	c.addi	x30,1
 414:	0200                	c.addi4spn	x8,x2,256
 416:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 120; i++) {
 418:	04090103          	lb	x2,64(x18)
 41c:	0100                	c.addi4spn	x8,x2,128
 41e:	2205                	c.jal	53e <main+0x48a>
 420:	0200                	c.addi4spn	x8,x2,256
 422:	0304                	c.addi4spn	x9,x2,384
 424:	0c097f03          	0xc097f03
 428:	0100                	c.addi4spn	x8,x2,128
 42a:	0905                	c.addi	x18,1
 42c:	0200                	c.addi4spn	x8,x2,256
 42e:	0104                	c.addi4spn	x9,x2,128
 430:	0c090003          	lb	x0,192(x18)
    } else if (b == 13) {
 434:	0100                	c.addi4spn	x8,x2,128
 436:	0f05                	c.addi	x30,1
 438:	10090303          	lb	x6,256(x18)
 43c:	0100                	c.addi4spn	x8,x2,128
 43e:	1205                	c.addi	x4,-31
        for (int i = 0; i < 130; i++) {
 440:	0c090103          	lb	x2,192(x18)
 444:	0100                	c.addi4spn	x8,x2,128
 446:	0905                	c.addi	x18,1
            a = a + 1;
 448:	04090003          	lb	x0,64(x18)
 44c:	0100                	c.addi4spn	x8,x2,128
 44e:	0f05                	c.addi	x30,1
 450:	0200                	c.addi4spn	x8,x2,256
 452:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 130; i++) {
 454:	04090103          	lb	x2,64(x18)
 458:	0100                	c.addi4spn	x8,x2,128
 45a:	2205                	c.jal	57a <main+0x4c6>
 45c:	0200                	c.addi4spn	x8,x2,256
 45e:	0304                	c.addi4spn	x9,x2,384
 460:	0c097f03          	0xc097f03
 464:	0100                	c.addi4spn	x8,x2,128
 466:	0905                	c.addi	x18,1
 468:	0200                	c.addi4spn	x8,x2,256
 46a:	0104                	c.addi4spn	x9,x2,128
 46c:	0c090003          	lb	x0,192(x18)
    } else if (b == 14) {
 470:	0100                	c.addi4spn	x8,x2,128
 472:	0f05                	c.addi	x30,1
 474:	10090303          	lb	x6,256(x18)
 478:	0100                	c.addi4spn	x8,x2,128
 47a:	1205                	c.addi	x4,-31
        for (int i = 0; i < 140; i++) {
 47c:	0c090103          	lb	x2,192(x18)
 480:	0100                	c.addi4spn	x8,x2,128
 482:	0905                	c.addi	x18,1
            a = a + 1;
 484:	04090003          	lb	x0,64(x18)
 488:	0100                	c.addi4spn	x8,x2,128
 48a:	0f05                	c.addi	x30,1
 48c:	0200                	c.addi4spn	x8,x2,256
 48e:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 140; i++) {
 490:	04090103          	lb	x2,64(x18)
 494:	0100                	c.addi4spn	x8,x2,128
 496:	2205                	c.jal	5b6 <main+0x502>
 498:	0200                	c.addi4spn	x8,x2,256
 49a:	0304                	c.addi4spn	x9,x2,384
 49c:	0c097f03          	0xc097f03
 4a0:	0100                	c.addi4spn	x8,x2,128
 4a2:	0905                	c.addi	x18,1
 4a4:	0200                	c.addi4spn	x8,x2,256
 4a6:	0104                	c.addi4spn	x9,x2,128
 4a8:	0c090003          	lb	x0,192(x18)
    } else if (b == 15) {
 4ac:	0100                	c.addi4spn	x8,x2,128
 4ae:	0f05                	c.addi	x30,1
 4b0:	10090303          	lb	x6,256(x18)
 4b4:	0100                	c.addi4spn	x8,x2,128
 4b6:	1205                	c.addi	x4,-31
        for (int i = 0; i < 150; i++) {
 4b8:	0c090103          	lb	x2,192(x18)
 4bc:	0100                	c.addi4spn	x8,x2,128
 4be:	0905                	c.addi	x18,1
            a = a + 1;
 4c0:	04090003          	lb	x0,64(x18)
 4c4:	0100                	c.addi4spn	x8,x2,128
 4c6:	0f05                	c.addi	x30,1
 4c8:	0200                	c.addi4spn	x8,x2,256
 4ca:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 150; i++) {
 4cc:	04090103          	lb	x2,64(x18)
 4d0:	0100                	c.addi4spn	x8,x2,128
 4d2:	2205                	c.jal	5f2 <main+0x53e>
 4d4:	0200                	c.addi4spn	x8,x2,256
 4d6:	0304                	c.addi4spn	x9,x2,384
 4d8:	0c097f03          	0xc097f03
 4dc:	0100                	c.addi4spn	x8,x2,128
 4de:	0905                	c.addi	x18,1
 4e0:	0200                	c.addi4spn	x8,x2,256
 4e2:	0104                	c.addi4spn	x9,x2,128
 4e4:	0c090003          	lb	x0,192(x18)
    } else if (b == 16) {
 4e8:	0100                	c.addi4spn	x8,x2,128
 4ea:	0f05                	c.addi	x30,1
 4ec:	10090303          	lb	x6,256(x18)
 4f0:	0100                	c.addi4spn	x8,x2,128
 4f2:	1205                	c.addi	x4,-31
        for (int i = 0; i < 160; i++) {
 4f4:	0c090103          	lb	x2,192(x18)
 4f8:	0100                	c.addi4spn	x8,x2,128
 4fa:	0905                	c.addi	x18,1
            a = a + 1;
 4fc:	04090003          	lb	x0,64(x18)
 500:	0100                	c.addi4spn	x8,x2,128
 502:	0f05                	c.addi	x30,1
 504:	0200                	c.addi4spn	x8,x2,256
 506:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 160; i++) {
 508:	04090103          	lb	x2,64(x18)
 50c:	0100                	c.addi4spn	x8,x2,128
 50e:	2305                	c.jal	a2e <hardware_data+0x16e>
 510:	0200                	c.addi4spn	x8,x2,256
 512:	0304                	c.addi4spn	x9,x2,384
 514:	0c097f03          	0xc097f03
 518:	0100                	c.addi4spn	x8,x2,128
 51a:	0905                	c.addi	x18,1
 51c:	0200                	c.addi4spn	x8,x2,256
 51e:	0104                	c.addi4spn	x9,x2,128
 520:	0c090003          	lb	x0,192(x18)
    } else if (b == 17) {
 524:	0100                	c.addi4spn	x8,x2,128
 526:	0f05                	c.addi	x30,1
 528:	10090303          	lb	x6,256(x18)
 52c:	0100                	c.addi4spn	x8,x2,128
 52e:	1205                	c.addi	x4,-31
        for (int i = 0; i < 170; i++) {
 530:	0c090103          	lb	x2,192(x18)
 534:	0100                	c.addi4spn	x8,x2,128
 536:	0905                	c.addi	x18,1
            a = a + 1;
 538:	04090003          	lb	x0,64(x18)
 53c:	0100                	c.addi4spn	x8,x2,128
 53e:	0f05                	c.addi	x30,1
 540:	0200                	c.addi4spn	x8,x2,256
 542:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 170; i++) {
 544:	04090103          	lb	x2,64(x18)
 548:	0100                	c.addi4spn	x8,x2,128
 54a:	2305                	c.jal	a6a <hardware_data+0x1aa>
 54c:	0200                	c.addi4spn	x8,x2,256
 54e:	0304                	c.addi4spn	x9,x2,384
 550:	0c097f03          	0xc097f03
 554:	0100                	c.addi4spn	x8,x2,128
 556:	0905                	c.addi	x18,1
 558:	0200                	c.addi4spn	x8,x2,256
 55a:	0104                	c.addi4spn	x9,x2,128
 55c:	0c090003          	lb	x0,192(x18)
    } else if (b == 18) {
 560:	0100                	c.addi4spn	x8,x2,128
 562:	0f05                	c.addi	x30,1
 564:	10090303          	lb	x6,256(x18)
 568:	0100                	c.addi4spn	x8,x2,128
 56a:	1205                	c.addi	x4,-31
        for (int i = 0; i < 180; i++) {
 56c:	0c090103          	lb	x2,192(x18)
 570:	0100                	c.addi4spn	x8,x2,128
 572:	0905                	c.addi	x18,1
            a = a + 1;
 574:	04090003          	lb	x0,64(x18)
 578:	0100                	c.addi4spn	x8,x2,128
 57a:	0f05                	c.addi	x30,1
 57c:	0200                	c.addi4spn	x8,x2,256
 57e:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 180; i++) {
 580:	04090103          	lb	x2,64(x18)
 584:	0100                	c.addi4spn	x8,x2,128
 586:	2305                	c.jal	aa6 <hardware_data+0x1e6>
 588:	0200                	c.addi4spn	x8,x2,256
 58a:	0304                	c.addi4spn	x9,x2,384
 58c:	0c097f03          	0xc097f03
 590:	0100                	c.addi4spn	x8,x2,128
 592:	0905                	c.addi	x18,1
 594:	0200                	c.addi4spn	x8,x2,256
 596:	0104                	c.addi4spn	x9,x2,128
 598:	0c090003          	lb	x0,192(x18)
    } else if (b == 19) {
 59c:	0100                	c.addi4spn	x8,x2,128
 59e:	0f05                	c.addi	x30,1
 5a0:	10090303          	lb	x6,256(x18)
 5a4:	0100                	c.addi4spn	x8,x2,128
 5a6:	1205                	c.addi	x4,-31
        for (int i = 0; i < 190; i++) {
 5a8:	0c090103          	lb	x2,192(x18)
 5ac:	0100                	c.addi4spn	x8,x2,128
 5ae:	0905                	c.addi	x18,1
            a = a + 1;
 5b0:	04090003          	lb	x0,64(x18)
 5b4:	0100                	c.addi4spn	x8,x2,128
 5b6:	0f05                	c.addi	x30,1
 5b8:	0200                	c.addi4spn	x8,x2,256
 5ba:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 190; i++) {
 5bc:	04090103          	lb	x2,64(x18)
 5c0:	0100                	c.addi4spn	x8,x2,128
 5c2:	2305                	c.jal	ae2 <hardware_data+0x222>
 5c4:	0200                	c.addi4spn	x8,x2,256
 5c6:	0304                	c.addi4spn	x9,x2,384
 5c8:	0c097f03          	0xc097f03
 5cc:	0100                	c.addi4spn	x8,x2,128
 5ce:	0905                	c.addi	x18,1
 5d0:	0200                	c.addi4spn	x8,x2,256
 5d2:	0104                	c.addi4spn	x9,x2,128
 5d4:	0c090003          	lb	x0,192(x18)
    } else if (b == 20) {
 5d8:	0100                	c.addi4spn	x8,x2,128
 5da:	0f05                	c.addi	x30,1
 5dc:	10090303          	lb	x6,256(x18)
 5e0:	0100                	c.addi4spn	x8,x2,128
 5e2:	1205                	c.addi	x4,-31
        for (int i = 0; i < 200; i++) {
 5e4:	0c090103          	lb	x2,192(x18)
 5e8:	0100                	c.addi4spn	x8,x2,128
 5ea:	0905                	c.addi	x18,1
            a = a + 1;
 5ec:	04090003          	lb	x0,64(x18)
 5f0:	0100                	c.addi4spn	x8,x2,128
 5f2:	0f05                	c.addi	x30,1
 5f4:	0200                	c.addi4spn	x8,x2,256
 5f6:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 200; i++) {
 5f8:	04090103          	lb	x2,64(x18)
 5fc:	0100                	c.addi4spn	x8,x2,128
 5fe:	2305                	c.jal	b1e <hardware_data+0x25e>
 600:	0200                	c.addi4spn	x8,x2,256
 602:	0304                	c.addi4spn	x9,x2,384
 604:	0c097f03          	0xc097f03
 608:	0100                	c.addi4spn	x8,x2,128
 60a:	0905                	c.addi	x18,1
 60c:	0200                	c.addi4spn	x8,x2,256
 60e:	0104                	c.addi4spn	x9,x2,128
 610:	0c090003          	lb	x0,192(x18)
    } else if (b == 21) {
 614:	0100                	c.addi4spn	x8,x2,128
 616:	0f05                	c.addi	x30,1
 618:	10090303          	lb	x6,256(x18)
 61c:	0100                	c.addi4spn	x8,x2,128
 61e:	1205                	c.addi	x4,-31
        for (int i = 0; i < 210; i++) {
 620:	0c090103          	lb	x2,192(x18)
 624:	0100                	c.addi4spn	x8,x2,128
 626:	0905                	c.addi	x18,1
            a = a + 1;
 628:	04090003          	lb	x0,64(x18)
 62c:	0100                	c.addi4spn	x8,x2,128
 62e:	0f05                	c.addi	x30,1
 630:	0200                	c.addi4spn	x8,x2,256
 632:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 210; i++) {
 634:	04090103          	lb	x2,64(x18)
 638:	0100                	c.addi4spn	x8,x2,128
 63a:	2305                	c.jal	b5a <hardware_data+0x29a>
 63c:	0200                	c.addi4spn	x8,x2,256
 63e:	0304                	c.addi4spn	x9,x2,384
 640:	0c097f03          	0xc097f03
 644:	0100                	c.addi4spn	x8,x2,128
 646:	0905                	c.addi	x18,1
 648:	0200                	c.addi4spn	x8,x2,256
 64a:	0104                	c.addi4spn	x9,x2,128
 64c:	0c090003          	lb	x0,192(x18)
    } else if (b == 22) {
 650:	0100                	c.addi4spn	x8,x2,128
 652:	0f05                	c.addi	x30,1
 654:	10090303          	lb	x6,256(x18)
 658:	0100                	c.addi4spn	x8,x2,128
 65a:	1205                	c.addi	x4,-31
        for (int i = 0; i < 220; i++) {
 65c:	0c090103          	lb	x2,192(x18)
 660:	0100                	c.addi4spn	x8,x2,128
 662:	0905                	c.addi	x18,1
            a = a + 1;
 664:	04090003          	lb	x0,64(x18)
 668:	0100                	c.addi4spn	x8,x2,128
 66a:	0f05                	c.addi	x30,1
 66c:	0200                	c.addi4spn	x8,x2,256
 66e:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 220; i++) {
 670:	04090103          	lb	x2,64(x18)
 674:	0100                	c.addi4spn	x8,x2,128
 676:	2305                	c.jal	b96 <hardware_data+0x2d6>
 678:	0200                	c.addi4spn	x8,x2,256
 67a:	0304                	c.addi4spn	x9,x2,384
 67c:	0c097f03          	0xc097f03
 680:	0100                	c.addi4spn	x8,x2,128
 682:	0905                	c.addi	x18,1
 684:	0200                	c.addi4spn	x8,x2,256
 686:	0104                	c.addi4spn	x9,x2,128
 688:	0c090003          	lb	x0,192(x18)
    } else if (b == 23) {
 68c:	0100                	c.addi4spn	x8,x2,128
 68e:	0f05                	c.addi	x30,1
 690:	10090303          	lb	x6,256(x18)
 694:	0100                	c.addi4spn	x8,x2,128
 696:	1205                	c.addi	x4,-31
        for (int i = 0; i < 230; i++) {
 698:	0c090103          	lb	x2,192(x18)
 69c:	0100                	c.addi4spn	x8,x2,128
 69e:	0905                	c.addi	x18,1
            a = a + 1;
 6a0:	04090003          	lb	x0,64(x18)
 6a4:	0100                	c.addi4spn	x8,x2,128
 6a6:	0f05                	c.addi	x30,1
 6a8:	0200                	c.addi4spn	x8,x2,256
 6aa:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 230; i++) {
 6ac:	04090103          	lb	x2,64(x18)
 6b0:	0100                	c.addi4spn	x8,x2,128
 6b2:	2305                	c.jal	bd2 <hardware_data+0x312>
 6b4:	0200                	c.addi4spn	x8,x2,256
 6b6:	0304                	c.addi4spn	x9,x2,384
 6b8:	0c097f03          	0xc097f03
 6bc:	0100                	c.addi4spn	x8,x2,128
 6be:	0905                	c.addi	x18,1
 6c0:	0200                	c.addi4spn	x8,x2,256
 6c2:	0104                	c.addi4spn	x9,x2,128
 6c4:	0c090003          	lb	x0,192(x18)
    } else if (b == 24) {
 6c8:	0100                	c.addi4spn	x8,x2,128
 6ca:	0f05                	c.addi	x30,1
 6cc:	10090303          	lb	x6,256(x18)
 6d0:	0100                	c.addi4spn	x8,x2,128
 6d2:	1205                	c.addi	x4,-31
        for (int i = 0; i < 240; i++) {
 6d4:	0c090103          	lb	x2,192(x18)
 6d8:	0100                	c.addi4spn	x8,x2,128
 6da:	0905                	c.addi	x18,1
            a = a + 1;
 6dc:	04090003          	lb	x0,64(x18)
 6e0:	0100                	c.addi4spn	x8,x2,128
 6e2:	0f05                	c.addi	x30,1
 6e4:	0200                	c.addi4spn	x8,x2,256
 6e6:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 240; i++) {
 6e8:	04090103          	lb	x2,64(x18)
 6ec:	0100                	c.addi4spn	x8,x2,128
 6ee:	2305                	c.jal	c0e <memory_data+0x2e>
 6f0:	0200                	c.addi4spn	x8,x2,256
 6f2:	0304                	c.addi4spn	x9,x2,384
 6f4:	0c097f03          	0xc097f03
 6f8:	0100                	c.addi4spn	x8,x2,128
 6fa:	0905                	c.addi	x18,1
 6fc:	0200                	c.addi4spn	x8,x2,256
 6fe:	0104                	c.addi4spn	x9,x2,128
 700:	0c090003          	lb	x0,192(x18)
    } else if (b == 25) {
 704:	0100                	c.addi4spn	x8,x2,128
 706:	0f05                	c.addi	x30,1
 708:	10090303          	lb	x6,256(x18)
 70c:	0100                	c.addi4spn	x8,x2,128
 70e:	1205                	c.addi	x4,-31
        for (int i = 0; i < 250; i++) {
 710:	0c090103          	lb	x2,192(x18)
 714:	0100                	c.addi4spn	x8,x2,128
 716:	0905                	c.addi	x18,1
            a = a + 1;
 718:	04090003          	lb	x0,64(x18)
 71c:	0100                	c.addi4spn	x8,x2,128
 71e:	0f05                	c.addi	x30,1
 720:	0200                	c.addi4spn	x8,x2,256
 722:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 250; i++) {
 724:	04090103          	lb	x2,64(x18)
 728:	0100                	c.addi4spn	x8,x2,128
 72a:	2305                	c.jal	c4a <memory_data+0x6a>
 72c:	0200                	c.addi4spn	x8,x2,256
 72e:	0304                	c.addi4spn	x9,x2,384
 730:	0c097f03          	0xc097f03
 734:	0100                	c.addi4spn	x8,x2,128
 736:	0905                	c.addi	x18,1
 738:	0200                	c.addi4spn	x8,x2,256
 73a:	0104                	c.addi4spn	x9,x2,128
 73c:	0c090003          	lb	x0,192(x18)
    } else if (b == 26) {
 740:	0100                	c.addi4spn	x8,x2,128
 742:	0f05                	c.addi	x30,1
 744:	10090303          	lb	x6,256(x18)
 748:	0100                	c.addi4spn	x8,x2,128
 74a:	1205                	c.addi	x4,-31
        for (int i = 0; i < 260; i++) {
 74c:	0c090103          	lb	x2,192(x18)
 750:	0100                	c.addi4spn	x8,x2,128
 752:	0905                	c.addi	x18,1
            a = a + 1;
 754:	04090003          	lb	x0,64(x18)
 758:	0100                	c.addi4spn	x8,x2,128
 75a:	0f05                	c.addi	x30,1
 75c:	0200                	c.addi4spn	x8,x2,256
 75e:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 260; i++) {
 760:	04090103          	lb	x2,64(x18)
 764:	0100                	c.addi4spn	x8,x2,128
 766:	2305                	c.jal	c86 <memory_data+0xa6>
 768:	0200                	c.addi4spn	x8,x2,256
 76a:	0304                	c.addi4spn	x9,x2,384
 76c:	0c097f03          	0xc097f03
 770:	0100                	c.addi4spn	x8,x2,128
 772:	0905                	c.addi	x18,1
 774:	0200                	c.addi4spn	x8,x2,256
 776:	0104                	c.addi4spn	x9,x2,128
 778:	0c090003          	lb	x0,192(x18)
    } else if (b == 27) {
 77c:	0100                	c.addi4spn	x8,x2,128
 77e:	0f05                	c.addi	x30,1
 780:	10090303          	lb	x6,256(x18)
 784:	0100                	c.addi4spn	x8,x2,128
 786:	1205                	c.addi	x4,-31
        for (int i = 0; i < 270; i++) {
 788:	0c090103          	lb	x2,192(x18)
 78c:	0100                	c.addi4spn	x8,x2,128
 78e:	0905                	c.addi	x18,1
            a = a + 1;
 790:	04090003          	lb	x0,64(x18)
 794:	0100                	c.addi4spn	x8,x2,128
 796:	0f05                	c.addi	x30,1
 798:	0200                	c.addi4spn	x8,x2,256
 79a:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 270; i++) {
 79c:	04090103          	lb	x2,64(x18)
 7a0:	0100                	c.addi4spn	x8,x2,128
 7a2:	2305                	c.jal	cc2 <memory_data+0xe2>
 7a4:	0200                	c.addi4spn	x8,x2,256
 7a6:	0304                	c.addi4spn	x9,x2,384
 7a8:	0c097f03          	0xc097f03
 7ac:	0100                	c.addi4spn	x8,x2,128
 7ae:	0905                	c.addi	x18,1
 7b0:	0200                	c.addi4spn	x8,x2,256
 7b2:	0104                	c.addi4spn	x9,x2,128
 7b4:	0c090003          	lb	x0,192(x18)
    } else if (b == 28) {
 7b8:	0100                	c.addi4spn	x8,x2,128
 7ba:	0f05                	c.addi	x30,1
 7bc:	10090303          	lb	x6,256(x18)
 7c0:	0100                	c.addi4spn	x8,x2,128
 7c2:	1205                	c.addi	x4,-31
        for (int i = 0; i < 280; i++) {
 7c4:	0c090103          	lb	x2,192(x18)
 7c8:	0100                	c.addi4spn	x8,x2,128
 7ca:	0905                	c.addi	x18,1
            a = a + 1;
 7cc:	04090003          	lb	x0,64(x18)
 7d0:	0100                	c.addi4spn	x8,x2,128
 7d2:	0f05                	c.addi	x30,1
 7d4:	0200                	c.addi4spn	x8,x2,256
 7d6:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 280; i++) {
 7d8:	04090103          	lb	x2,64(x18)
 7dc:	0100                	c.addi4spn	x8,x2,128
 7de:	2305                	c.jal	cfe <memory_data+0x11e>
 7e0:	0200                	c.addi4spn	x8,x2,256
 7e2:	0304                	c.addi4spn	x9,x2,384
 7e4:	0c097f03          	0xc097f03
 7e8:	0100                	c.addi4spn	x8,x2,128
 7ea:	0905                	c.addi	x18,1
 7ec:	0200                	c.addi4spn	x8,x2,256
 7ee:	0104                	c.addi4spn	x9,x2,128
 7f0:	0c090003          	lb	x0,192(x18)
    } else if (b == 29) {
 7f4:	0100                	c.addi4spn	x8,x2,128
 7f6:	0f05                	c.addi	x30,1
 7f8:	10090303          	lb	x6,256(x18)
 7fc:	0100                	c.addi4spn	x8,x2,128
 7fe:	1205                	c.addi	x4,-31
        for (int i = 0; i < 290; i++) {
 800:	0c090103          	lb	x2,192(x18)
 804:	0100                	c.addi4spn	x8,x2,128
 806:	0905                	c.addi	x18,1
            a = a + 1;
 808:	04090003          	lb	x0,64(x18)
 80c:	0100                	c.addi4spn	x8,x2,128
 80e:	0f05                	c.addi	x30,1
 810:	0200                	c.addi4spn	x8,x2,256
 812:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 290; i++) {
 814:	04090103          	lb	x2,64(x18)
 818:	0100                	c.addi4spn	x8,x2,128
 81a:	2305                	c.jal	d3a <memory_data+0x15a>
 81c:	0200                	c.addi4spn	x8,x2,256
 81e:	0304                	c.addi4spn	x9,x2,384
 820:	0c097f03          	0xc097f03
 824:	0100                	c.addi4spn	x8,x2,128
 826:	0905                	c.addi	x18,1
 828:	0200                	c.addi4spn	x8,x2,256
 82a:	0104                	c.addi4spn	x9,x2,128
 82c:	0c090003          	lb	x0,192(x18)
    } else if (b == 30) {
 830:	0100                	c.addi4spn	x8,x2,128
 832:	0f05                	c.addi	x30,1
 834:	10090303          	lb	x6,256(x18)
 838:	0100                	c.addi4spn	x8,x2,128
 83a:	1205                	c.addi	x4,-31
        for (int i = 0; i < 300; i++) {
 83c:	0c090103          	lb	x2,192(x18)
 840:	0100                	c.addi4spn	x8,x2,128
 842:	0905                	c.addi	x18,1
            a = a + 1;
 844:	04090003          	lb	x0,64(x18)
 848:	0100                	c.addi4spn	x8,x2,128
 84a:	0f05                	c.addi	x30,1
 84c:	0200                	c.addi4spn	x8,x2,256
 84e:	0304                	c.addi4spn	x9,x2,384
        for (int i = 0; i < 300; i++) {
 850:	04090103          	lb	x2,64(x18)
 854:	0100                	c.addi4spn	x8,x2,128
 856:	2305                	c.jal	d76 <memory_data+0x196>
 858:	0200                	c.addi4spn	x8,x2,256
 85a:	0304                	c.addi4spn	x9,x2,384
 85c:	0c097f03          	0xc097f03
 860:	0100                	c.addi4spn	x8,x2,128
 862:	0905                	c.addi	x18,1
 864:	0200                	c.addi4spn	x8,x2,256
 866:	0104                	c.addi4spn	x9,x2,128
    return 0;
 868:	0c090003          	lb	x0,192(x18)
}
 86c:	0100                	c.addi4spn	x8,x2,128
 86e:	0f05                	c.addi	x30,1
 870:	10090303          	lb	x6,256(x18)
 874:	0100                	c.addi4spn	x8,x2,128
 876:	1205                	c.addi	x4,-31
 878:	0c090103          	lb	x2,192(x18)
 87c:	0100                	c.addi4spn	x8,x2,128
 87e:	0905                	c.addi	x18,1
 880:	04090003          	lb	x0,64(x18)
 884:	0100                	c.addi4spn	x8,x2,128
 886:	0f05                	c.addi	x30,1
 888:	0200                	c.addi4spn	x8,x2,256
 88a:	0304                	c.addi4spn	x9,x2,384
 88c:	04090103          	lb	x2,64(x18)
 890:	0100                	c.addi4spn	x8,x2,128
 892:	2305                	c.jal	db2 <memory_data+0x1d2>
 894:	0200                	c.addi4spn	x8,x2,256
 896:	0304                	c.addi4spn	x9,x2,384
 898:	0c097f03          	0xc097f03
 89c:	0100                	c.addi4spn	x8,x2,128
 89e:	0905                	c.addi	x18,1
 8a0:	0200                	c.addi4spn	x8,x2,256
 8a2:	0104                	c.addi4spn	x9,x2,128
 8a4:	0c090003          	lb	x0,192(x18)
 8a8:	0100                	c.addi4spn	x8,x2,128
 8aa:	0f05                	c.addi	x30,1
 8ac:	10090303          	lb	x6,256(x18)
 8b0:	0100                	c.addi4spn	x8,x2,128
 8b2:	1205                	c.addi	x4,-31
 8b4:	0c090103          	lb	x2,192(x18)
 8b8:	0100                	c.addi4spn	x8,x2,128
 8ba:	0905                	c.addi	x18,1
 8bc:	04090003          	lb	x0,64(x18)
 8c0:	0100                	c.addi4spn	x8,x2,128
 8c2:	0f05                	c.addi	x30,1
 8c4:	0200                	c.addi4spn	x8,x2,256
 8c6:	0304                	c.addi4spn	x9,x2,384
 8c8:	04090103          	lb	x2,64(x18)
 8cc:	0100                	c.addi4spn	x8,x2,128
 8ce:	2305                	c.jal	dee <memory_data+0x20e>
 8d0:	0200                	c.addi4spn	x8,x2,256
 8d2:	0304                	c.addi4spn	x9,x2,384
 8d4:	0c097f03          	0xc097f03
 8d8:	0100                	c.addi4spn	x8,x2,128
 8da:	0905                	c.addi	x18,1
 8dc:	0200                	c.addi4spn	x8,x2,256
 8de:	0104                	c.addi4spn	x9,x2,128
 8e0:	0c090003          	lb	x0,192(x18)
 8e4:	0100                	c.addi4spn	x8,x2,128
 8e6:	0f05                	c.addi	x30,1
 8e8:	10090303          	lb	x6,256(x18)
 8ec:	0100                	c.addi4spn	x8,x2,128
 8ee:	1205                	c.addi	x4,-31
 8f0:	0c090103          	lb	x2,192(x18)
 8f4:	0100                	c.addi4spn	x8,x2,128
 8f6:	0905                	c.addi	x18,1
 8f8:	04090003          	lb	x0,64(x18)
 8fc:	0100                	c.addi4spn	x8,x2,128
 8fe:	0f05                	c.addi	x30,1
 900:	0200                	c.addi4spn	x8,x2,256
 902:	0304                	c.addi4spn	x9,x2,384
 904:	04090103          	lb	x2,64(x18)
 908:	0100                	c.addi4spn	x8,x2,128
 90a:	2305                	c.jal	e2a <memory_data+0x24a>
 90c:	0200                	c.addi4spn	x8,x2,256
 90e:	0304                	c.addi4spn	x9,x2,384
 910:	0c097f03          	0xc097f03
 914:	0100                	c.addi4spn	x8,x2,128
 916:	0905                	c.addi	x18,1
 918:	0200                	c.addi4spn	x8,x2,256
 91a:	0104                	c.addi4spn	x9,x2,128
 91c:	0c090003          	lb	x0,192(x18)
 920:	0100                	c.addi4spn	x8,x2,128
 922:	0f05                	c.addi	x30,1
 924:	10090303          	lb	x6,256(x18)
 928:	0100                	c.addi4spn	x8,x2,128
 92a:	1205                	c.addi	x4,-31
 92c:	0c090103          	lb	x2,192(x18)
 930:	0100                	c.addi4spn	x8,x2,128
 932:	0905                	c.addi	x18,1
 934:	04090003          	lb	x0,64(x18)
 938:	0100                	c.addi4spn	x8,x2,128
 93a:	0f05                	c.addi	x30,1
 93c:	0200                	c.addi4spn	x8,x2,256
 93e:	0304                	c.addi4spn	x9,x2,384
 940:	04090103          	lb	x2,64(x18)
 944:	0100                	c.addi4spn	x8,x2,128
 946:	2305                	c.jal	e66 <memory_data+0x286>
 948:	0200                	c.addi4spn	x8,x2,256
 94a:	0304                	c.addi4spn	x9,x2,384
 94c:	0c097f03          	0xc097f03
 950:	0100                	c.addi4spn	x8,x2,128
 952:	0905                	c.addi	x18,1
 954:	0200                	c.addi4spn	x8,x2,256
 956:	0104                	c.addi4spn	x9,x2,128
 958:	0c090003          	lb	x0,192(x18)
 95c:	0100                	c.addi4spn	x8,x2,128
 95e:	0f05                	c.addi	x30,1
 960:	10090303          	lb	x6,256(x18)
 964:	0100                	c.addi4spn	x8,x2,128
 966:	1205                	c.addi	x4,-31
 968:	0c090103          	lb	x2,192(x18)
 96c:	0100                	c.addi4spn	x8,x2,128
 96e:	0905                	c.addi	x18,1
 970:	04090003          	lb	x0,64(x18)
 974:	0100                	c.addi4spn	x8,x2,128
 976:	0f05                	c.addi	x30,1
 978:	0200                	c.addi4spn	x8,x2,256
 97a:	0304                	c.addi4spn	x9,x2,384
 97c:	04090103          	lb	x2,64(x18)
 980:	0100                	c.addi4spn	x8,x2,128
 982:	2305                	c.jal	ea2 <memory_data+0x2c2>
 984:	0200                	c.addi4spn	x8,x2,256
 986:	0304                	c.addi4spn	x9,x2,384
 988:	0c097f03          	0xc097f03
 98c:	0100                	c.addi4spn	x8,x2,128
 98e:	0905                	c.addi	x18,1
 990:	0200                	c.addi4spn	x8,x2,256
 992:	0104                	c.addi4spn	x9,x2,128
 994:	0c090003          	lb	x0,192(x18)
 998:	0100                	c.addi4spn	x8,x2,128
 99a:	0f05                	c.addi	x30,1
 99c:	10090303          	lb	x6,256(x18)
 9a0:	0100                	c.addi4spn	x8,x2,128
 9a2:	1205                	c.addi	x4,-31
 9a4:	0c090103          	lb	x2,192(x18)
 9a8:	0100                	c.addi4spn	x8,x2,128
 9aa:	0905                	c.addi	x18,1
 9ac:	04090003          	lb	x0,64(x18)
 9b0:	0100                	c.addi4spn	x8,x2,128
 9b2:	0f05                	c.addi	x30,1
 9b4:	0200                	c.addi4spn	x8,x2,256
 9b6:	0304                	c.addi4spn	x9,x2,384
 9b8:	04090103          	lb	x2,64(x18)
 9bc:	0100                	c.addi4spn	x8,x2,128
 9be:	2305                	c.jal	ede <memory_data+0x2fe>
 9c0:	0200                	c.addi4spn	x8,x2,256
 9c2:	0304                	c.addi4spn	x9,x2,384
 9c4:	0c097f03          	0xc097f03
 9c8:	0100                	c.addi4spn	x8,x2,128
 9ca:	0905                	c.addi	x18,1
 9cc:	0200                	c.addi4spn	x8,x2,256
 9ce:	0104                	c.addi4spn	x9,x2,128
 9d0:	0c090003          	lb	x0,192(x18)
 9d4:	0100                	c.addi4spn	x8,x2,128
 9d6:	0c05                	c.addi	x24,1
 9d8:	0c090603          	lb	x12,192(x18)
 9dc:	0100                	c.addi4spn	x8,x2,128
 9de:	0105                	c.addi	x2,1
 9e0:	04090103          	lb	x2,64(x18)
 9e4:	0100                	c.addi4spn	x8,x2,128
 9e6:	1009                	c.addi	x0,-30
 9e8:	0000                	c.unimp
 9ea:	0101                	c.addi	x2,0

Disassembly of section .debug_info:

00000000 <.debug_info>:
    nop
   0:	001e                	c.slli	x0,0x7
   2:	0000                	c.unimp
    la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0104                	c.addi4spn	x9,x2,128
	...
    la gp, __global_pointer$
  18:	0000000f          	fence	unknown,unknown
  1c:	003c                	c.addi4spn	x15,x2,8
  1e:	0000                	c.unimp
    li tp, 0
  20:	8001                	c.srli64	x8
  22:	0cd9                	c.addi	x25,22
    li t0, 0
  24:	0000                	c.unimp
  26:	0004                	0x4
    li t1, 0
  28:	0012                	c.slli	x0,0x4
  2a:	0000                	c.unimp
    li t2, 0
  2c:	0104                	c.addi4spn	x9,x2,128
  2e:	02ea                	c.slli	x5,0x1a
    li s1, 0
  30:	0000                	c.unimp
  32:	6c0c                	c.flw	f11,24(x8)
    li a0, 0
  34:	0002                	c.slli64	x0
  36:	0f00                	c.addi4spn	x8,x2,912
    li a1, 0
  38:	0000                	c.unimp
  3a:	b400                	c.fsd	f8,40(x8)
    li a2, 0
  3c:	0000                	c.unimp
  3e:	c800                	c.sw	x8,16(x8)
    li a3, 0
  40:	21000007          	0x21000007
    li a4, 0
  44:	0001                	c.addi	x0,0
  46:	0200                	c.addi4spn	x8,x2,256
    li a5, 0
  48:	0601                	c.addi	x12,0
  4a:	02d9                	c.addi	x5,22
    li a6, 0
  4c:	0000                	c.unimp
  4e:	0102                	c.slli64	x2
    li a7, 0
  50:	d708                	c.sw	x10,40(x14)
  52:	0002                	c.slli64	x0
    li s2, 0
  54:	0200                	c.addi4spn	x8,x2,256
  56:	0502                	c.slli64	x10
    li s3, 0
  58:	035e                	c.slli	x6,0x17
  5a:	0000                	c.unimp
    li s4, 0
  5c:	0202                	c.slli64	x4
  5e:	0001e707          	0x1e707
    li s5, 0
  62:	0200                	c.addi4spn	x8,x2,256
    li s6, 0
  64:	0504                	c.addi4spn	x9,x2,640
  66:	000000e3          	beq	x0,x0,866 <main+0x7b2>
    li s7, 0
  6a:	0402                	c.slli64	x8
    li s8, 0
  6c:	00009207          	0x9207
    li s9, 0
  70:	0200                	c.addi4spn	x8,x2,256
  72:	0508                	c.addi4spn	x10,x2,640
    li s10, 0
  74:	00de                	c.slli	x1,0x17
  76:	0000                	c.unimp
    li s11, 0
  78:	0802                	c.slli64	x16
  7a:	00008d07          	0x8d07
    li t3, 0
  7e:	0300                	c.addi4spn	x8,x2,384
    li t4, 0
  80:	0504                	c.addi4spn	x9,x2,640
  82:	6e69                	c.lui	x28,0x1a
    li t5, 0
  84:	0074                	c.addi4spn	x13,x2,12
  86:	0402                	c.slli64	x8
    li t6, 0
  88:	00009707          	0x9707
    j main
  8c:	0200                	c.addi4spn	x8,x2,256
  8e:	0410                	c.addi4spn	x12,x2,512
  90:	0259                	c.addi	x4,22
  92:	0000                	c.unimp
  94:	2a04                	c.fld	f9,16(x12)
  96:	0002                	c.slli64	x0
  98:	0200                	c.addi4spn	x8,x2,256
  9a:	015e                	c.slli	x2,0x17
  9c:	00006417          	auipc	x8,0x6
    la sp, _sp
  a0:	0500                	c.addi4spn	x8,x2,640
  a2:	02a8                	c.addi4spn	x10,x2,328
  a4:	0000                	c.unimp
  a6:	410e2e03          	lw	x28,1040(x28) # 1a410 <_sp+0xa410>
    sw a0, -8(sp)
  aa:	0000                	c.unimp
    nop
  ac:	0500                	c.addi4spn	x8,x2,640
  ae:	041a                	c.slli	x8,0x6
    wfi
  b0:	0000                	c.unimp
  b2:	410e7403          	0x410e7403
{
  b6:	0000                	c.unimp
  b8:	0500                	c.addi4spn	x8,x2,640
  ba:	0496                	c.slli	x9,0x5
  bc:	0000                	c.unimp
  be:	5d179303          	lh	x6,1489(x15)
    for (int i = 0; i < 200; i++) {
  c2:	0000                	c.unimp
  c4:	0600                	c.addi4spn	x8,x2,768
  c6:	0304                	c.addi4spn	x9,x2,384
        memory_data[i] = (unsigned int)(i % 30);
  c8:	03a5                	c.addi	x7,9
  ca:	00c5                	c.addi	x1,17
  cc:	0000                	c.unimp
  ce:	00022407          	flw	f8,0(x4) # fffe1000 <_sp+0xfffd1000>
  d2:	0300                	c.addi4spn	x8,x2,384
  d4:	00720ca7          	0x720ca7
  d8:	0000                	c.unimp
  da:	0001c307          	flq	f6,0(x3) # 1080 <__global_pointer$>
  de:	0300                	c.addi4spn	x8,x2,384
  e0:	13a8                	c.addi4spn	x10,x2,488
  e2:	00c5                	c.addi	x1,17
  e4:	0000                	c.unimp
  e6:	0800                	c.addi4spn	x8,x2,16
  e8:	002c                	c.addi4spn	x11,x2,8
  ea:	0000                	c.unimp
  ec:	00d5                	c.addi	x1,21
  ee:	0000                	c.unimp
  f0:	6409                	c.lui	x8,0x2
  f2:	0000                	c.unimp
  f4:	0300                	c.addi4spn	x8,x2,384
  f6:	0a00                	c.addi4spn	x8,x2,272
  f8:	0308                	c.addi4spn	x10,x2,384
  fa:	09a2                	c.slli	x19,0x8
  fc:	00f9                	c.addi	x1,30
  fe:	0000                	c.unimp
 100:	0004040b          	0x4040b
 104:	0300                	c.addi4spn	x8,x2,384
 106:	07a4                	c.addi4spn	x9,x2,968
 108:	005d                	c.addi	x0,23
 10a:	0000                	c.unimp
 10c:	0b00                	c.addi4spn	x8,x2,400
 10e:	040c                	c.addi4spn	x11,x2,512
 110:	0000                	c.unimp
 112:	a305a903          	lw	x18,-1488(x11)
 116:	0000                	c.unimp
 118:	0400                	c.addi4spn	x8,x2,512
 11a:	0500                	c.addi4spn	x8,x2,640
    for (int i = 0; i < 200; i++) {
 11c:	0386                	c.slli	x7,0x1
 11e:	0000                	c.unimp
 120:	d503aa03          	lw	x20,-688(x7)
 124:	0000                	c.unimp
 126:	0c00                	c.addi4spn	x8,x2,528
 128:	0504                	c.addi4spn	x9,x2,640
 12a:	044c                	c.addi4spn	x11,x2,516
 12c:	0000                	c.unimp
 12e:	1604                	c.addi4spn	x9,x2,800
 130:	4819                	c.li	x16,6
 132:	0000                	c.unimp
    a = 0;
 134:	0500                	c.addi4spn	x8,x2,640
 136:	02b9                	c.addi	x5,14
    b = 20;
 138:	0000                	c.unimp
 13a:	0c05                	c.addi	x24,1
 13c:	5d0d                	c.li	x26,-29
 13e:	0000                	c.unimp
    if (b == 1) {
 140:	0500                	c.addi4spn	x8,x2,640
 142:	0186                	c.slli	x3,0x1
 144:	0000                	c.unimp
 146:	2304                	c.fld	f9,0(x14)
 148:	0001131b          	0x1131b
        for (int i = 0; i < 50; i++) {
 14c:	0d00                	c.addi4spn	x8,x2,656
 14e:	00000197          	auipc	x3,0x0
 152:	0418                	c.addi4spn	x14,x2,512
            hardware_data[i] = memory_data[i];
 154:	0834                	c.addi4spn	x13,x2,24
 156:	0185                	c.addi	x3,1
 158:	0000                	c.unimp
 15a:	0003a70b          	0x3a70b
 15e:	0400                	c.addi4spn	x8,x2,512
 160:	1336                	c.slli	x6,0x2d
 162:	0185                	c.addi	x3,1
 164:	0000                	c.unimp
 166:	0e00                	c.addi4spn	x8,x2,784
 168:	6b5f 0400 0737      	0x73704006b5f
 16e:	005d                	c.addi	x0,23
 170:	0000                	c.unimp
 172:	0b04                	c.addi4spn	x9,x2,400
 174:	000003ef          	jal	x7,174 <main+0xc0>
 178:	3704                	c.fld	f9,40(x14)
 17a:	00005d0b          	0x5d0b
 17e:	0800                	c.addi4spn	x8,x2,16
 180:	0001800b          	0x1800b
        for (int i = 0; i < 50; i++) {
 184:	0400                	c.addi4spn	x8,x2,512
 186:	005d1437          	lui	x8,0x5d1
 18a:	0000                	c.unimp
 18c:	0b0c                	c.addi4spn	x11,x2,400
 18e:	0481                	c.addi	x9,0
 190:	0000                	c.unimp
 192:	3704                	c.fld	f9,40(x14)
 194:	00005d1b          	0x5d1b
 198:	1000                	c.addi4spn	x8,x2,32
 19a:	5f0e                	c.lwsp	x30,224(x2)
 19c:	0078                	c.addi4spn	x14,x2,12
 19e:	3804                	c.fld	f9,48(x8)
    } else if (b == 2) {
 1a0:	00018b0b          	0x18b0b
 1a4:	1400                	c.addi4spn	x8,x2,544
 1a6:	0f00                	c.addi4spn	x8,x2,912
 1a8:	2b04                	c.fld	f9,16(x14)
 1aa:	0001                	c.addi	x0,0
        for (int i = 0; i < 10; i++) {
 1ac:	0800                	c.addi4spn	x8,x2,16
 1ae:	00000107          	0x107
 1b2:	0000019b          	0x19b
            a = a + 1;
 1b6:	6409                	c.lui	x8,0x2
 1b8:	0000                	c.unimp
 1ba:	0000                	c.unimp
 1bc:	0d00                	c.addi4spn	x8,x2,656
 1be:	01be                	c.slli	x3,0xf
        for (int i = 0; i < 10; i++) {
 1c0:	0000                	c.unimp
 1c2:	0424                	c.addi4spn	x9,x2,520
 1c4:	083c                	c.addi4spn	x15,x2,24
 1c6:	021e                	c.slli	x4,0x7
 1c8:	0000                	c.unimp
 1ca:	0000d50b          	0xd50b
 1ce:	0400                	c.addi4spn	x8,x2,512
 1d0:	093e                	c.slli	x18,0xf
 1d2:	005d                	c.addi	x0,23
 1d4:	0000                	c.unimp
 1d6:	0b00                	c.addi4spn	x8,x2,400
 1d8:	0422                	c.slli	x8,0x8
 1da:	0000                	c.unimp
    } else if (b == 3) {
 1dc:	3f04                	c.fld	f9,56(x14)
 1de:	5d09                	c.li	x26,-30
 1e0:	0000                	c.unimp
 1e2:	0400                	c.addi4spn	x8,x2,512
 1e4:	0000f80b          	0xf80b
        for (int i = 0; i < 10; i++) {
 1e8:	0400                	c.addi4spn	x8,x2,512
 1ea:	0940                	c.addi4spn	x8,x2,148
 1ec:	005d                	c.addi	x0,23
 1ee:	0000                	c.unimp
            a = a + 1;
 1f0:	0b08                	c.addi4spn	x10,x2,400
 1f2:	050d                	c.addi	x10,3
 1f4:	0000                	c.unimp
 1f6:	4104                	c.lw	x9,0(x10)
 1f8:	5d09                	c.li	x26,-30
 1fa:	0000                	c.unimp
        for (int i = 0; i < 10; i++) {
 1fc:	0c00                	c.addi4spn	x8,x2,528
 1fe:	0002820b          	0x2820b
 202:	0400                	c.addi4spn	x8,x2,512
 204:	0942                	c.slli	x18,0x10
 206:	005d                	c.addi	x0,23
 208:	0000                	c.unimp
 20a:	0b10                	c.addi4spn	x12,x2,400
 20c:	0246                	c.slli	x4,0x11
 20e:	0000                	c.unimp
 210:	4304                	c.lw	x9,0(x14)
 212:	5d09                	c.li	x26,-30
 214:	0000                	c.unimp
 216:	1400                	c.addi4spn	x8,x2,544
    } else if (b == 4) {
 218:	0004860b          	0x4860b
 21c:	0400                	c.addi4spn	x8,x2,512
 21e:	0944                	c.addi4spn	x9,x2,148
 220:	005d                	c.addi	x0,23
 222:	0000                	c.unimp
        for (int i = 0; i < 100; i++) {
 224:	0b18                	c.addi4spn	x14,x2,400
 226:	0368                	c.addi4spn	x10,x2,396
 228:	0000                	c.unimp
 22a:	4504                	c.lw	x9,8(x10)
            a = a + 1;
 22c:	5d09                	c.li	x26,-30
 22e:	0000                	c.unimp
 230:	1c00                	c.addi4spn	x8,x2,560
 232:	0004c10b          	0x4c10b
 236:	0400                	c.addi4spn	x8,x2,512
        for (int i = 0; i < 100; i++) {
 238:	0946                	c.slli	x18,0x11
 23a:	005d                	c.addi	x0,23
 23c:	0000                	c.unimp
 23e:	0020                	c.addi4spn	x8,x2,8
 240:	0710                	c.addi4spn	x12,x2,896
 242:	0001                	c.addi	x0,0
 244:	0800                	c.addi4spn	x8,x2,16
 246:	0401                	c.addi	x8,0
 248:	0263084f          	fnmadd.d	f16,f6,f6,f0,rne
 24c:	0000                	c.unimp
 24e:	0001730b          	0x1730b
 252:	0400                	c.addi4spn	x8,x2,512
    } else if (b == 5) {
 254:	0a50                	c.addi4spn	x12,x2,276
 256:	00000263          	beq	x0,x0,25a <main+0x1a6>
 25a:	0b00                	c.addi4spn	x8,x2,400
 25c:	0048                	c.addi4spn	x10,x2,4
 25e:	0000                	c.unimp
        for (int i = 0; i < 50; i++) {
 260:	5104                	c.lw	x9,32(x10)
 262:	6309                	c.lui	x6,0x2
 264:	0002                	c.slli64	x0
 266:	8000                	0x8000
            a = a + 1;
 268:	3e11                	c.jal	fffffd7c <_sp+0xfffefd7c>
 26a:	0004                	0x4
 26c:	0400                	c.addi4spn	x8,x2,512
 26e:	01070a53          	fadd.s	f20,f14,f16,rne
 272:	0000                	c.unimp
        for (int i = 0; i < 50; i++) {
 274:	0100                	c.addi4spn	x8,x2,128
 276:	2c11                	c.jal	48a <main+0x3d6>
 278:	0001                	c.addi	x0,0
 27a:	0400                	c.addi4spn	x8,x2,512
 27c:	0a56                	c.slli	x20,0x15
 27e:	00000107          	0x107
 282:	0104                	c.addi4spn	x9,x2,128
 284:	0800                	c.addi4spn	x8,x2,16
 286:	0105                	c.addi	x2,1
 288:	0000                	c.unimp
 28a:	00000273          	0x273
 28e:	6409                	c.lui	x8,0x2
    } else if (b == 6) {
 290:	0000                	c.unimp
 292:	1f00                	c.addi4spn	x8,x2,944
 294:	1000                	c.addi4spn	x8,x2,32
 296:	0000028b          	0x28b
 29a:	0190                	c.addi4spn	x12,x2,192
        for (int i = 0; i < 60; i++) {
 29c:	6204                	c.flw	f9,0(x12)
 29e:	b608                	c.fsd	f10,40(x12)
 2a0:	0002                	c.slli64	x0
 2a2:	0b00                	c.addi4spn	x8,x2,400
            a = a + 1;
 2a4:	000003a7          	0x3a7
 2a8:	6304                	c.flw	f9,0(x14)
 2aa:	b612                	c.fsdsp	f4,296(x2)
 2ac:	0002                	c.slli64	x0
 2ae:	0000                	c.unimp
        for (int i = 0; i < 60; i++) {
 2b0:	0003bf0b          	0x3bf0b
 2b4:	0400                	c.addi4spn	x8,x2,512
 2b6:	0664                	c.addi4spn	x9,x2,780
 2b8:	005d                	c.addi	x0,23
 2ba:	0000                	c.unimp
 2bc:	0b04                	c.addi4spn	x9,x2,400
 2be:	0000017b          	0x17b
 2c2:	6604                	c.flw	f9,8(x12)
 2c4:	bc09                	c.j	fffffcd6 <_sp+0xfffefcd6>
 2c6:	0002                	c.slli64	x0
 2c8:	0800                	c.addi4spn	x8,x2,16
 2ca:	0001070b          	0x1070b
    } else if (b == 7) {
 2ce:	0400                	c.addi4spn	x8,x2,512
 2d0:	021e1e67          	0x21e1e67
 2d4:	0000                	c.unimp
 2d6:	0088                	c.addi4spn	x10,x2,64
        for (int i = 0; i < 70; i++) {
 2d8:	0273040f          	0x273040f
 2dc:	0000                	c.unimp
 2de:	cc08                	c.sw	x10,24(x8)
            a = a + 1;
 2e0:	0002                	c.slli64	x0
 2e2:	cc00                	c.sw	x8,24(x8)
 2e4:	0002                	c.slli64	x0
 2e6:	0900                	c.addi4spn	x8,x2,144
 2e8:	0064                	c.addi4spn	x9,x2,12
 2ea:	0000                	c.unimp
        for (int i = 0; i < 70; i++) {
 2ec:	001f 040f 02d2      	0x2d2040f001f
 2f2:	0000                	c.unimp
 2f4:	0d12                	c.slli	x26,0x4
 2f6:	0372                	c.slli	x6,0x1c
 2f8:	0000                	c.unimp
 2fa:	0408                	c.addi4spn	x10,x2,512
 2fc:	087a                	c.slli	x16,0x1e
 2fe:	000002fb          	0x2fb
 302:	0000f20b          	0xf20b
 306:	0400                	c.addi4spn	x8,x2,512
    } else if (b == 8) {
 308:	02fb117b          	0x2fb117b
 30c:	0000                	c.unimp
 30e:	0b00                	c.addi4spn	x8,x2,400
 310:	0054                	c.addi4spn	x13,x2,4
 312:	0000                	c.unimp
        for (int i = 0; i < 80; i++) {
 314:	7c04                	c.flw	f9,56(x8)
 316:	5d06                	c.lwsp	x26,96(x2)
 318:	0000                	c.unimp
 31a:	0400                	c.addi4spn	x8,x2,512
            a = a + 1;
 31c:	0f00                	c.addi4spn	x8,x2,912
 31e:	2c04                	c.fld	f9,24(x8)
 320:	0000                	c.unimp
 322:	0d00                	c.addi4spn	x8,x2,656
 324:	0391                	c.addi	x7,4
 326:	0000                	c.unimp
        for (int i = 0; i < 80; i++) {
 328:	0468                	c.addi4spn	x10,x2,524
 32a:	08ba                	c.slli	x17,0xe
 32c:	0444                	c.addi4spn	x9,x2,516
 32e:	0000                	c.unimp
 330:	5f0e                	c.lwsp	x30,224(x2)
 332:	0070                	c.addi4spn	x12,x2,12
 334:	bb04                	c.fsd	f9,48(x14)
 336:	fb12                	c.fswsp	f4,180(x2)
 338:	0002                	c.slli64	x0
 33a:	0000                	c.unimp
 33c:	5f0e                	c.lwsp	x30,224(x2)
 33e:	0072                	c.slli	x0,0x1c
 340:	bc04                	c.fsd	f9,56(x8)
 342:	00005d07          	0x5d07
    } else if (b == 9) {
 346:	0400                	c.addi4spn	x8,x2,512
 348:	5f0e                	c.lwsp	x30,224(x2)
 34a:	bd040077          	0xbd040077
 34e:	00005d07          	0x5d07
        for (int i = 0; i < 90; i++) {
 352:	0800                	c.addi4spn	x8,x2,16
 354:	0001250b          	0x1250b
            a = a + 1;
 358:	0400                	c.addi4spn	x8,x2,512
 35a:	09be                	c.slli	x19,0xf
 35c:	00000033          	add	x0,x0,x0
 360:	0b0c                	c.addi4spn	x11,x2,400
 362:	01da                	c.slli	x3,0x16
        for (int i = 0; i < 90; i++) {
 364:	0000                	c.unimp
 366:	bf04                	c.fsd	f9,56(x14)
 368:	3309                	c.jal	6a <crt+0x6a>
 36a:	0000                	c.unimp
 36c:	0e00                	c.addi4spn	x8,x2,784
 36e:	5f0e                	c.lwsp	x30,224(x2)
 370:	6662                	c.flwsp	f12,24(x2)
 372:	0400                	c.addi4spn	x8,x2,512
 374:	11c0                	c.addi4spn	x8,x2,228
 376:	000002d3          	fadd.s	f5,f0,f0,rne
 37a:	0b10                	c.addi4spn	x12,x2,400
 37c:	00a4                	c.addi4spn	x9,x2,72
 37e:	0000                	c.unimp
    } else if (b == 10) {
 380:	c104                	c.sw	x9,0(x10)
 382:	00005d07          	0x5d07
 386:	1800                	c.addi4spn	x8,x2,48
 388:	0001150b          	0x1150b
        for (int i = 0; i < 100; i++) {
 38c:	0400                	c.addi4spn	x8,x2,512
 38e:	0ac8                	c.addi4spn	x10,x2,340
 390:	0105                	c.addi	x2,1
 392:	0000                	c.unimp
            a = a + 1;
 394:	0b1c                	c.addi4spn	x15,x2,400
 396:	01ae                	c.slli	x3,0xb
 398:	0000                	c.unimp
 39a:	ca04                	c.sw	x9,16(x12)
 39c:	c81d                	c.beqz	x8,3d2 <main+0x31e>
 39e:	0005                	c.addi	x0,1
        for (int i = 0; i < 100; i++) {
 3a0:	2000                	c.fld	f8,0(x8)
 3a2:	00023f0b          	0x23f0b
 3a6:	0400                	c.addi4spn	x8,x2,512
 3a8:	1dcc                	c.addi4spn	x11,x2,756
 3aa:	05f2                	c.slli	x11,0x1c
 3ac:	0000                	c.unimp
 3ae:	0b24                	c.addi4spn	x9,x2,408
 3b0:	0414                	c.addi4spn	x13,x2,512
 3b2:	0000                	c.unimp
 3b4:	cf04                	c.sw	x9,24(x14)
 3b6:	160d                	c.addi	x12,-29
 3b8:	0006                	c.slli	x0,0x1
 3ba:	2800                	c.fld	f8,16(x8)
    } else if (b == 11) {
 3bc:	0004db0b          	0x4db0b
 3c0:	0400                	c.addi4spn	x8,x2,512
 3c2:	09d0                	c.addi4spn	x12,x2,212
 3c4:	0630                	c.addi4spn	x12,x2,776
 3c6:	0000                	c.unimp
        for (int i = 0; i < 110; i++) {
 3c8:	0e2c                	c.addi4spn	x11,x2,792
 3ca:	755f 0062 d304      	0xd3040062755f
            a = a + 1;
 3d0:	d311                	c.beqz	x14,2d4 <main+0x220>
 3d2:	0002                	c.slli64	x0
 3d4:	3000                	c.fld	f8,32(x8)
 3d6:	5f0e                	c.lwsp	x30,224(x2)
 3d8:	7075                	c.lui	x0,0xffffd
 3da:	0400                	c.addi4spn	x8,x2,512
        for (int i = 0; i < 110; i++) {
 3dc:	12d4                	c.addi4spn	x13,x2,356
 3de:	000002fb          	0x2fb
 3e2:	0e38                	c.addi4spn	x14,x2,792
 3e4:	755f 0072 d504      	0xd5040072755f
 3ea:	00005d07          	0x5d07
 3ee:	3c00                	c.fld	f8,56(x8)
 3f0:	0000ec0b          	0xec0b
 3f4:	0400                	c.addi4spn	x8,x2,512
 3f6:	11d8                	c.addi4spn	x14,x2,228
    } else if (b == 12) {
 3f8:	0636                	c.slli	x12,0xd
 3fa:	0000                	c.unimp
 3fc:	0b40                	c.addi4spn	x8,x2,404
 3fe:	000004b3          	add	x9,x0,x0
 402:	d904                	c.sw	x9,48(x10)
        for (int i = 0; i < 120; i++) {
 404:	4611                	c.li	x12,4
 406:	0006                	c.slli	x0,0x1
 408:	4300                	c.lw	x8,0(x14)
 40a:	5f0e                	c.lwsp	x30,224(x2)
            a = a + 1;
 40c:	626c                	c.flw	f11,68(x12)
 40e:	0400                	c.addi4spn	x8,x2,512
 410:	11dc                	c.addi4spn	x15,x2,228
 412:	000002d3          	fadd.s	f5,f0,f0,rne
 416:	0b44                	c.addi4spn	x9,x2,404
        for (int i = 0; i < 120; i++) {
 418:	0000013b          	0x13b
 41c:	df04                	c.sw	x9,56(x14)
 41e:	00005d07          	0x5d07
 422:	4c00                	c.lw	x8,24(x8)
 424:	00014c0b          	0x14c0b
 428:	0400                	c.addi4spn	x8,x2,512
 42a:	0ae0                	c.addi4spn	x8,x2,348
 42c:	007f                	0x7f
 42e:	0000                	c.unimp
 430:	0b50                	c.addi4spn	x12,x2,404
 432:	0502                	c.slli64	x10
    } else if (b == 13) {
 434:	0000                	c.unimp
 436:	e304                	c.fsw	f9,0(x14)
 438:	6212                	c.flwsp	f4,4(x2)
 43a:	0004                	0x4
 43c:	5400                	c.lw	x8,40(x8)
 43e:	0002310b          	0x2310b
        for (int i = 0; i < 130; i++) {
 442:	0400                	c.addi4spn	x8,x2,512
 444:	011f0ce7          	jalr	x25,17(x30)
            a = a + 1;
 448:	0000                	c.unimp
 44a:	0b58                	c.addi4spn	x14,x2,404
 44c:	0399                	c.addi	x7,6
 44e:	0000                	c.unimp
 450:	e904                	c.fsw	f9,16(x10)
 452:	f90e                	c.fswsp	f3,176(x2)
        for (int i = 0; i < 130; i++) {
 454:	0000                	c.unimp
 456:	5c00                	c.lw	x8,56(x8)
 458:	0002370b          	0x2370b
 45c:	0400                	c.addi4spn	x8,x2,512
 45e:	09ea                	c.slli	x19,0x1a
 460:	005d                	c.addi	x0,23
 462:	0000                	c.unimp
 464:	0064                	c.addi4spn	x9,x2,12
 466:	00009713          	slli	x14,x1,0x0
 46a:	6200                	c.flw	f8,0(x12)
 46c:	0004                	0x4
 46e:	1400                	c.addi4spn	x8,x2,544
    } else if (b == 14) {
 470:	0462                	c.slli	x8,0x18
 472:	0000                	c.unimp
 474:	0514                	c.addi4spn	x13,x2,640
 476:	0001                	c.addi	x0,0
 478:	1400                	c.addi4spn	x8,x2,544
 47a:	05b6                	c.slli	x11,0xd
        for (int i = 0; i < 140; i++) {
 47c:	0000                	c.unimp
 47e:	5d14                	c.lw	x13,56(x10)
 480:	0000                	c.unimp
 482:	0000                	c.unimp
            a = a + 1;
 484:	046d040f          	0x46d040f
 488:	0000                	c.unimp
 48a:	6215                	c.lui	x4,0x5
 48c:	0004                	0x4
 48e:	1600                	c.addi4spn	x8,x2,800
        for (int i = 0; i < 140; i++) {
 490:	000003f7          	0x3f7
 494:	0428                	c.addi4spn	x10,x2,520
 496:	6504                	c.flw	f9,8(x10)
 498:	0802                	c.slli64	x16
 49a:	05b6                	c.slli	x11,0xd
 49c:	0000                	c.unimp
 49e:	00035717          	auipc	x14,0x35
 4a2:	0400                	c.addi4spn	x8,x2,512
 4a4:	5d070267          	jalr	x4,1488(x14) # 35a6e <_sp+0x25a6e>
 4a8:	0000                	c.unimp
 4aa:	0000                	c.unimp
    } else if (b == 15) {
 4ac:	00013417          	auipc	x8,0x13
 4b0:	0400                	c.addi4spn	x8,x2,512
 4b2:	026c                	c.addi4spn	x11,x2,268
 4b4:	0006a20b          	0x6a20b
        for (int i = 0; i < 150; i++) {
 4b8:	0400                	c.addi4spn	x8,x2,512
 4ba:	0001ca17          	auipc	x20,0x1c
 4be:	0400                	c.addi4spn	x8,x2,512
            a = a + 1;
 4c0:	026c                	c.addi4spn	x11,x2,268
 4c2:	a214                	c.fsd	f13,0(x12)
 4c4:	0006                	c.slli	x0,0x1
 4c6:	0800                	c.addi4spn	x8,x2,16
 4c8:	00018f17          	auipc	x30,0x18
        for (int i = 0; i < 150; i++) {
 4cc:	0400                	c.addi4spn	x8,x2,512
 4ce:	026c                	c.addi4spn	x11,x2,268
 4d0:	a21e                	c.fsdsp	f7,256(x2)
 4d2:	0006                	c.slli	x0,0x1
 4d4:	0c00                	c.addi4spn	x8,x2,528
 4d6:	0003ba17          	auipc	x20,0x3b
 4da:	0400                	c.addi4spn	x8,x2,512
 4dc:	026e                	c.slli	x4,0x1b
 4de:	5d08                	c.lw	x10,56(x10)
 4e0:	0000                	c.unimp
 4e2:	1000                	c.addi4spn	x8,x2,32
 4e4:	00006217          	auipc	x4,0x6
    } else if (b == 16) {
 4e8:	0400                	c.addi4spn	x8,x2,512
 4ea:	a208026f          	jal	x4,fff8070a <_sp+0xfff7070a>
 4ee:	0008                	0x8
 4f0:	1400                	c.addi4spn	x8,x2,544
 4f2:	0003d617          	auipc	x12,0x3d
        for (int i = 0; i < 160; i++) {
 4f6:	0400                	c.addi4spn	x8,x2,512
 4f8:	0272                	c.slli	x4,0x1c
 4fa:	00005d07          	0x5d07
            a = a + 1;
 4fe:	3000                	c.fld	f8,32(x8)
 500:	0003c417          	auipc	x8,0x3c
 504:	0400                	c.addi4spn	x8,x2,512
 506:	b7160273          	0xb7160273
        for (int i = 0; i < 160; i++) {
 50a:	0008                	0x8
 50c:	3400                	c.fld	f8,40(x8)
 50e:	00029d17          	auipc	x26,0x29
 512:	0400                	c.addi4spn	x8,x2,512
 514:	0275                	c.addi	x4,29
 516:	00005d07          	0x5d07
 51a:	3800                	c.fld	f8,48(x8)
 51c:	0003cc17          	auipc	x24,0x3c
 520:	0400                	c.addi4spn	x8,x2,512
 522:	c80a0277          	0xc80a0277
    } else if (b == 17) {
 526:	0008                	0x8
 528:	3c00                	c.fld	f8,56(x8)
 52a:	00021c17          	auipc	x24,0x21
 52e:	0400                	c.addi4spn	x8,x2,512
        for (int i = 0; i < 170; i++) {
 530:	027a                	c.slli	x4,0x1e
 532:	00018513          	addi	x10,x3,0 # 14e <main+0x9a>
 536:	4000                	c.lw	x8,0(x8)
            a = a + 1;
 538:	0001b417          	auipc	x8,0x1b
 53c:	0400                	c.addi4spn	x8,x2,512
 53e:	5d07027b          	0x5d07027b
 542:	0000                	c.unimp
        for (int i = 0; i < 170; i++) {
 544:	4400                	c.lw	x8,8(x8)
 546:	0004f517          	auipc	x10,0x4f
 54a:	0400                	c.addi4spn	x8,x2,512
 54c:	027c                	c.addi4spn	x15,x2,268
 54e:	00018513          	addi	x10,x3,0 # 1080 <__global_pointer$>
 552:	4800                	c.lw	x8,16(x8)
 554:	0002af17          	auipc	x30,0x2a
 558:	0400                	c.addi4spn	x8,x2,512
 55a:	027d                	c.addi	x4,31
 55c:	ce14                	c.sw	x13,24(x12)
 55e:	0008                	0x8
    } else if (b == 18) {
 560:	4c00                	c.lw	x8,24(x8)
 562:	0001d217          	auipc	x4,0x1d
 566:	0400                	c.addi4spn	x8,x2,512
 568:	0280                	c.addi4spn	x8,x2,320
 56a:	00005d07          	0x5d07
        for (int i = 0; i < 180; i++) {
 56e:	5000                	c.lw	x8,32(x8)
 570:	00014417          	auipc	x8,0x14
            a = a + 1;
 574:	0400                	c.addi4spn	x8,x2,512
 576:	0281                	c.addi	x5,0
 578:	b609                	c.j	7a <crt+0x7a>
 57a:	0005                	c.addi	x0,1
 57c:	5400                	c.lw	x8,40(x8)
 57e:	0002e517          	auipc	x10,0x2e
        for (int i = 0; i < 180; i++) {
 582:	0400                	c.addi4spn	x8,x2,512
 584:	02a4                	c.addi4spn	x9,x2,328
 586:	00087d07          	0x87d07
 58a:	5800                	c.lw	x8,48(x8)
 58c:	8b18                	0x8b18
 58e:	0002                	c.slli64	x0
 590:	0400                	c.addi4spn	x8,x2,512
 592:	02a8                	c.addi4spn	x10,x2,328
 594:	0002b613          	sltiu	x12,x5,0
 598:	4800                	c.lw	x8,16(x8)
 59a:	1801                	c.addi	x16,-32
    } else if (b == 19) {
 59c:	01fa                	c.slli	x3,0x1e
 59e:	0000                	c.unimp
 5a0:	a904                	c.fsd	f9,16(x10)
 5a2:	1202                	c.slli	x4,0x20
 5a4:	00000273          	0x273
        for (int i = 0; i < 190; i++) {
 5a8:	014c                	c.addi4spn	x11,x2,132
 5aa:	a918                	c.fsd	f14,16(x10)
 5ac:	0004                	0x4
 5ae:	0400                	c.addi4spn	x8,x2,512
            a = a + 1;
 5b0:	02ad                	c.addi	x5,11
 5b2:	df0c                	c.sw	x11,56(x14)
 5b4:	0008                	0x8
 5b6:	dc00                	c.sw	x8,56(x8)
 5b8:	1802                	c.slli	x16,0x20
 5ba:	011d                	c.addi	x2,7
        for (int i = 0; i < 190; i++) {
 5bc:	0000                	c.unimp
 5be:	b204                	c.fsd	f9,32(x12)
 5c0:	1002                	c.slli	x0,0x20
 5c2:	00000663          	beq	x0,x0,5ce <main+0x51a>
 5c6:	02e0                	c.addi4spn	x8,x2,332
 5c8:	0218                	c.addi4spn	x14,x2,256
 5ca:	0001                	c.addi	x0,0
 5cc:	0400                	c.addi4spn	x8,x2,512
 5ce:	02b4                	c.addi4spn	x13,x2,328
 5d0:	eb0a                	c.fswsp	f2,148(x2)
 5d2:	0008                	0x8
 5d4:	ec00                	c.fsw	f8,24(x8)
 5d6:	0002                	c.slli64	x0
    } else if (b == 20) {
 5d8:	05bc040f          	0x5bc040f
 5dc:	0000                	c.unimp
 5de:	0102                	c.slli64	x2
 5e0:	e008                	c.fsw	f10,0(x8)
 5e2:	0002                	c.slli64	x0
        for (int i = 0; i < 200; i++) {
 5e4:	1500                	c.addi4spn	x8,x2,672
 5e6:	05bc                	c.addi4spn	x15,x2,712
 5e8:	0000                	c.unimp
 5ea:	0444040f          	0x444040f
            a = a + 1;
 5ee:	0000                	c.unimp
 5f0:	00009713          	slli	x14,x1,0x0
 5f4:	ec00                	c.fsw	f8,24(x8)
 5f6:	0005                	c.addi	x0,1
        for (int i = 0; i < 200; i++) {
 5f8:	1400                	c.addi4spn	x8,x2,544
 5fa:	0462                	c.slli	x8,0x18
 5fc:	0000                	c.unimp
 5fe:	0514                	c.addi4spn	x13,x2,640
 600:	0001                	c.addi	x0,0
 602:	1400                	c.addi4spn	x8,x2,544
 604:	05ec                	c.addi4spn	x11,x2,716
 606:	0000                	c.unimp
 608:	5d14                	c.lw	x13,56(x10)
 60a:	0000                	c.unimp
 60c:	0000                	c.unimp
 60e:	05c3040f          	0x5c3040f
 612:	0000                	c.unimp
    } else if (b == 21) {
 614:	05ce040f          	0x5ce040f
 618:	0000                	c.unimp
 61a:	00008b13          	addi	x22,x1,0
 61e:	1600                	c.addi4spn	x8,x2,800
        for (int i = 0; i < 210; i++) {
 620:	0006                	c.slli	x0,0x1
 622:	1400                	c.addi4spn	x8,x2,544
 624:	0462                	c.slli	x8,0x18
 626:	0000                	c.unimp
            a = a + 1;
 628:	0514                	c.addi4spn	x13,x2,640
 62a:	0001                	c.addi	x0,0
 62c:	1400                	c.addi4spn	x8,x2,544
 62e:	0000008b          	0x8b
 632:	5d14                	c.lw	x13,56(x10)
        for (int i = 0; i < 210; i++) {
 634:	0000                	c.unimp
 636:	0000                	c.unimp
 638:	05f8040f          	0x5f8040f
 63c:	0000                	c.unimp
 63e:	00005d13          	srli	x26,x0,0x0
 642:	3000                	c.fld	f8,32(x8)
 644:	0006                	c.slli	x0,0x1
 646:	1400                	c.addi4spn	x8,x2,544
 648:	0462                	c.slli	x8,0x18
 64a:	0000                	c.unimp
 64c:	0514                	c.addi4spn	x13,x2,640
 64e:	0001                	c.addi	x0,0
    } else if (b == 22) {
 650:	0000                	c.unimp
 652:	061c040f          	0x61c040f
 656:	0000                	c.unimp
 658:	2c08                	c.fld	f10,24(x8)
 65a:	0000                	c.unimp
        for (int i = 0; i < 220; i++) {
 65c:	4600                	c.lw	x8,8(x12)
 65e:	0006                	c.slli	x0,0x1
 660:	0900                	c.addi4spn	x8,x2,144
 662:	0064                	c.addi4spn	x9,x2,12
            a = a + 1;
 664:	0000                	c.unimp
 666:	0002                	c.slli64	x0
 668:	2c08                	c.fld	f10,24(x8)
 66a:	0000                	c.unimp
 66c:	5600                	c.lw	x8,40(x12)
 66e:	0006                	c.slli	x0,0x1
        for (int i = 0; i < 220; i++) {
 670:	0900                	c.addi4spn	x8,x2,144
 672:	0064                	c.addi4spn	x9,x2,12
 674:	0000                	c.unimp
 676:	0000                	c.unimp
 678:	7f04                	c.flw	f9,56(x14)
 67a:	04000003          	lb	x0,64(x0) # 40 <crt+0x40>
 67e:	0124                	c.addi4spn	x9,x2,136
 680:	011a                	c.slli	x2,0x6
 682:	19000003          	lb	x0,400(x0) # 190 <main+0xdc>
 686:	0490                	c.addi4spn	x12,x2,576
 688:	0000                	c.unimp
 68a:	040c                	c.addi4spn	x11,x2,512
    } else if (b == 23) {
 68c:	0128                	c.addi4spn	x10,x2,136
 68e:	9c08                	0x9c08
 690:	0006                	c.slli	x0,0x1
 692:	1700                	c.addi4spn	x8,x2,928
 694:	000003a7          	0x3a7
        for (int i = 0; i < 230; i++) {
 698:	2a04                	c.fld	f9,16(x12)
 69a:	1101                	c.addi	x2,-32
 69c:	069c                	c.addi4spn	x15,x2,832
 69e:	0000                	c.unimp
            a = a + 1;
 6a0:	1700                	c.addi4spn	x8,x2,928
 6a2:	01e0                	c.addi4spn	x8,x2,204
 6a4:	0000                	c.unimp
 6a6:	2b04                	c.fld	f9,16(x14)
 6a8:	0701                	c.addi	x14,0
 6aa:	005d                	c.addi	x0,23
        for (int i = 0; i < 230; i++) {
 6ac:	0000                	c.unimp
 6ae:	1704                	c.addi4spn	x9,x2,928
 6b0:	0379                	c.addi	x6,30
 6b2:	0000                	c.unimp
 6b4:	2c04                	c.fld	f9,24(x8)
 6b6:	0b01                	c.addi	x22,0
 6b8:	06a2                	c.slli	x13,0x8
 6ba:	0000                	c.unimp
 6bc:	0008                	0x8
 6be:	0663040f          	0x663040f
 6c2:	0000                	c.unimp
 6c4:	0656040f          	0x656040f
    } else if (b == 24) {
 6c8:	0000                	c.unimp
 6ca:	5a19                	c.li	x20,-26
 6cc:	0000                	c.unimp
 6ce:	0e00                	c.addi4spn	x8,x2,784
 6d0:	4404                	c.lw	x9,8(x8)
 6d2:	0801                	c.addi	x16,0
        for (int i = 0; i < 240; i++) {
 6d4:	06e1                	c.addi	x13,24
 6d6:	0000                	c.unimp
 6d8:	0003fe17          	auipc	x28,0x3f
            a = a + 1;
 6dc:	0400                	c.addi4spn	x8,x2,512
 6de:	0145                	c.addi	x2,17
 6e0:	e112                	c.fswsp	f4,128(x2)
 6e2:	0006                	c.slli	x0,0x1
 6e4:	0000                	c.unimp
 6e6:	00042b17          	auipc	x22,0x42
        for (int i = 0; i < 240; i++) {
 6ea:	0400                	c.addi4spn	x8,x2,512
 6ec:	0146                	c.slli	x2,0x11
 6ee:	e112                	c.fswsp	f4,128(x2)
 6f0:	0006                	c.slli	x0,0x1
 6f2:	0600                	c.addi4spn	x8,x2,768
 6f4:	00044717          	auipc	x14,0x44
 6f8:	0400                	c.addi4spn	x8,x2,512
 6fa:	3a120147          	fmsub.d	f2,f4,f1,f7,rne
 6fe:	0000                	c.unimp
 700:	0c00                	c.addi4spn	x8,x2,528
 702:	0800                	c.addi4spn	x8,x2,16
    } else if (b == 25) {
 704:	003a                	c.slli	x0,0xe
 706:	0000                	c.unimp
 708:	06f1                	c.addi	x13,28
 70a:	0000                	c.unimp
 70c:	6409                	c.lui	x8,0x2
 70e:	0000                	c.unimp
        for (int i = 0; i < 250; i++) {
 710:	0200                	c.addi4spn	x8,x2,256
 712:	1a00                	c.addi4spn	x8,x2,304
 714:	04d0                	c.addi4spn	x12,x2,580
 716:	0285                	c.addi	x5,1
            a = a + 1;
 718:	00080607          	0x80607
 71c:	1700                	c.addi4spn	x8,x2,928
 71e:	0474                	c.addi4spn	x13,x2,524
 720:	0000                	c.unimp
 722:	8704                	0x8704
        for (int i = 0; i < 250; i++) {
 724:	1802                	c.slli	x16,0x20
 726:	0064                	c.addi4spn	x9,x2,12
 728:	0000                	c.unimp
 72a:	1700                	c.addi4spn	x8,x2,928
 72c:	0431                	c.addi	x8,12
 72e:	0000                	c.unimp
 730:	8804                	0x8804
 732:	1202                	c.slli	x4,0x20
 734:	05b6                	c.slli	x11,0xd
 736:	0000                	c.unimp
 738:	1704                	c.addi4spn	x9,x2,928
 73a:	0000020f          	0x20f
 73e:	8904                	0x8904
    } else if (b == 26) {
 740:	1002                	c.slli	x0,0x20
 742:	0806                	c.slli	x16,0x1
 744:	0000                	c.unimp
 746:	1708                	c.addi4spn	x10,x2,928
 748:	04cc                	c.addi4spn	x11,x2,580
 74a:	0000                	c.unimp
        for (int i = 0; i < 260; i++) {
 74c:	8a04                	0x8a04
 74e:	1702                	c.slli	x14,0x20
 750:	0000019b          	0x19b
            a = a + 1;
 754:	1724                	c.addi4spn	x9,x2,936
 756:	019f 0000 8b04      	0x8b040000019f
 75c:	0f02                	c.slli64	x30
 75e:	005d                	c.addi	x0,23
        for (int i = 0; i < 260; i++) {
 760:	0000                	c.unimp
 762:	1748                	c.addi4spn	x10,x2,932
 764:	03a2                	c.slli	x7,0x8
 766:	0000                	c.unimp
 768:	8c04                	0x8c04
 76a:	2c02                	c.fldsp	f24,0(x2)
 76c:	0056                	c.slli	x0,0x15
 76e:	0000                	c.unimp
 770:	1750                	c.addi4spn	x12,x2,932
 772:	04e2                	c.slli	x9,0x18
 774:	0000                	c.unimp
 776:	8d04                	0x8d04
 778:	1a02                	c.slli	x20,0x20
 77a:	06a8                	c.addi4spn	x10,x2,840
    } else if (b == 27) {
 77c:	0000                	c.unimp
 77e:	1758                	c.addi4spn	x14,x2,932
 780:	03ad                	c.addi	x7,11
 782:	0000                	c.unimp
 784:	8e04                	0x8e04
 786:	1602                	c.slli	x12,0x20
        for (int i = 0; i < 270; i++) {
 788:	00f9                	c.addi	x1,30
 78a:	0000                	c.unimp
 78c:	1768                	c.addi4spn	x10,x2,940
 78e:	000004e7          	jalr	x9,0(x0) # 0 <crt>
            a = a + 1;
 792:	8f04                	0x8f04
 794:	1602                	c.slli	x12,0x20
 796:	00f9                	c.addi	x1,30
 798:	0000                	c.unimp
 79a:	1770                	c.addi4spn	x12,x2,940
        for (int i = 0; i < 270; i++) {
 79c:	000000c7          	fmsub.s	f1,f0,f0,f0,rne
 7a0:	9004                	0x9004
 7a2:	1602                	c.slli	x12,0x20
 7a4:	00f9                	c.addi	x1,30
 7a6:	0000                	c.unimp
 7a8:	1778                	c.addi4spn	x14,x2,940
 7aa:	049f 0000 9104      	0x91040000049f
 7b0:	1002                	c.slli	x0,0x20
 7b2:	0816                	c.slli	x16,0x5
 7b4:	0000                	c.unimp
 7b6:	1780                	c.addi4spn	x8,x2,992
    } else if (b == 28) {
 7b8:	00000203          	lb	x4,0(x0) # 0 <crt>
 7bc:	9204                	0x9204
 7be:	1002                	c.slli	x0,0x20
 7c0:	0826                	c.slli	x16,0x9
 7c2:	0000                	c.unimp
        for (int i = 0; i < 280; i++) {
 7c4:	1788                	c.addi4spn	x10,x2,992
 7c6:	0454                	c.addi4spn	x13,x2,516
 7c8:	0000                	c.unimp
 7ca:	9304                	0x9304
            a = a + 1;
 7cc:	0f02                	c.slli64	x30
 7ce:	005d                	c.addi	x0,23
 7d0:	0000                	c.unimp
 7d2:	17a0                	c.addi4spn	x8,x2,1000
 7d4:	0165                	c.addi	x2,25
 7d6:	0000                	c.unimp
        for (int i = 0; i < 280; i++) {
 7d8:	9404                	0x9404
 7da:	1602                	c.slli	x12,0x20
 7dc:	00f9                	c.addi	x1,30
 7de:	0000                	c.unimp
 7e0:	17a4                	c.addi4spn	x9,x2,1000
 7e2:	00b8                	c.addi4spn	x14,x2,72
 7e4:	0000                	c.unimp
 7e6:	9504                	0x9504
 7e8:	1602                	c.slli	x12,0x20
 7ea:	00f9                	c.addi	x1,30
 7ec:	0000                	c.unimp
 7ee:	17ac                	c.addi4spn	x11,x2,1000
 7f0:	0154                	c.addi4spn	x13,x2,132
 7f2:	0000                	c.unimp
    } else if (b == 29) {
 7f4:	9604                	0x9604
 7f6:	1602                	c.slli	x12,0x20
 7f8:	00f9                	c.addi	x1,30
 7fa:	0000                	c.unimp
 7fc:	17b4                	c.addi4spn	x13,x2,1000
 7fe:	006d                	c.addi	x0,27
        for (int i = 0; i < 290; i++) {
 800:	0000                	c.unimp
 802:	9704                	0x9704
 804:	1602                	c.slli	x12,0x20
 806:	00f9                	c.addi	x1,30
            a = a + 1;
 808:	0000                	c.unimp
 80a:	17bc                	c.addi4spn	x15,x2,1000
 80c:	007c                	c.addi4spn	x15,x2,12
 80e:	0000                	c.unimp
 810:	9804                	0x9804
 812:	1602                	c.slli	x12,0x20
        for (int i = 0; i < 290; i++) {
 814:	00f9                	c.addi	x1,30
 816:	0000                	c.unimp
 818:	17c4                	c.addi4spn	x9,x2,996
 81a:	0355                	c.addi	x6,21
 81c:	0000                	c.unimp
 81e:	9904                	0x9904
 820:	0802                	c.slli64	x16
 822:	005d                	c.addi	x0,23
 824:	0000                	c.unimp
 826:	00cc                	c.addi4spn	x11,x2,68
 828:	bc08                	c.fsd	f10,56(x8)
 82a:	0005                	c.addi	x0,1
 82c:	1600                	c.addi4spn	x8,x2,800
 82e:	0008                	0x8
    } else if (b == 30) {
 830:	0900                	c.addi4spn	x8,x2,144
 832:	0064                	c.addi4spn	x9,x2,12
 834:	0000                	c.unimp
 836:	0019                	c.addi	x0,6
 838:	bc08                	c.fsd	f10,56(x8)
 83a:	0005                	c.addi	x0,1
        for (int i = 0; i < 300; i++) {
 83c:	2600                	c.fld	f8,8(x12)
 83e:	0008                	0x8
 840:	0900                	c.addi4spn	x8,x2,144
 842:	0064                	c.addi4spn	x9,x2,12
            a = a + 1;
 844:	0000                	c.unimp
 846:	bc080007          	0xbc080007
 84a:	0005                	c.addi	x0,1
 84c:	3600                	c.fld	f8,40(x12)
 84e:	0008                	0x8
        for (int i = 0; i < 300; i++) {
 850:	0900                	c.addi4spn	x8,x2,144
 852:	0064                	c.addi4spn	x9,x2,12
 854:	0000                	c.unimp
 856:	f01a0017          	auipc	x0,0xf01a0
 85a:	9e04                	0x9e04
 85c:	0702                	c.slli64	x14
 85e:	085d                	c.addi	x16,23
 860:	0000                	c.unimp
 862:	00026517          	auipc	x10,0x26
 866:	0400                	c.addi4spn	x8,x2,512
    return 0;
 868:	02a1                	c.addi	x5,8
 86a:	00085d1b          	0x85d1b
}
 86e:	0000                	c.unimp
 870:	00025017          	auipc	x0,0x25
 874:	0400                	c.addi4spn	x8,x2,512
 876:	02a2                	c.slli	x5,0x8
 878:	6d18                	c.flw	f14,24(x10)
 87a:	0008                	0x8
 87c:	7800                	c.flw	f8,48(x8)
 87e:	0800                	c.addi4spn	x8,x2,16
 880:	000002fb          	0x2fb
 884:	086d                	c.addi	x16,27
 886:	0000                	c.unimp
 888:	6409                	c.lui	x8,0x2
 88a:	0000                	c.unimp
 88c:	1d00                	c.addi4spn	x8,x2,688
 88e:	0800                	c.addi4spn	x8,x2,16
 890:	0064                	c.addi4spn	x9,x2,12
 892:	0000                	c.unimp
 894:	087d                	c.addi	x16,31
 896:	0000                	c.unimp
 898:	6409                	c.lui	x8,0x2
 89a:	0000                	c.unimp
 89c:	1d00                	c.addi4spn	x8,x2,688
 89e:	1b00                	c.addi4spn	x8,x2,432
 8a0:	04f0                	c.addi4spn	x12,x2,588
 8a2:	a2030283          	lb	x5,-1504(x6) # 1a20 <__global_pointer$+0x9a0>
 8a6:	0008                	0x8
 8a8:	1c00                	c.addi4spn	x8,x2,560
 8aa:	000003f7          	0x3f7
 8ae:	9a04                	0x9a04
 8b0:	0b02                	c.slli64	x22
 8b2:	06f1                	c.addi	x13,28
 8b4:	0000                	c.unimp
 8b6:	b91c                	c.fsd	f15,48(x10)
 8b8:	0004                	0x4
 8ba:	0400                	c.addi4spn	x8,x2,512
 8bc:	360b02a3          	sb	x0,869(x22) # 42a4b <_sp+0x32a4b>
 8c0:	0008                	0x8
 8c2:	0000                	c.unimp
 8c4:	bc08                	c.fsd	f10,56(x8)
 8c6:	0005                	c.addi	x0,1
 8c8:	b200                	c.fsd	f8,32(x12)
 8ca:	0008                	0x8
 8cc:	0900                	c.addi4spn	x8,x2,144
 8ce:	0064                	c.addi4spn	x9,x2,12
 8d0:	0000                	c.unimp
 8d2:	0018                	0x18
 8d4:	ad1d                	c.j	f0a <memory_data+0x32a>
 8d6:	0000                	c.unimp
 8d8:	0f00                	c.addi4spn	x8,x2,912
 8da:	b204                	c.fsd	f9,32(x12)
 8dc:	0008                	0x8
 8de:	1e00                	c.addi4spn	x8,x2,816
 8e0:	08c8                	c.addi4spn	x10,x2,84
 8e2:	0000                	c.unimp
 8e4:	6214                	c.flw	f13,0(x12)
 8e6:	0004                	0x4
 8e8:	0000                	c.unimp
 8ea:	08bd040f          	0x8bd040f
 8ee:	0000                	c.unimp
 8f0:	0185040f          	0x185040f
 8f4:	0000                	c.unimp
 8f6:	df1e                	c.swsp	x7,188(x2)
 8f8:	0008                	0x8
 8fa:	1400                	c.addi4spn	x8,x2,544
 8fc:	005d                	c.addi	x0,23
 8fe:	0000                	c.unimp
 900:	0f00                	c.addi4spn	x8,x2,912
 902:	e504                	c.fsw	f9,8(x10)
 904:	0008                	0x8
 906:	0f00                	c.addi4spn	x8,x2,912
 908:	d404                	c.sw	x9,40(x8)
 90a:	0008                	0x8
 90c:	0800                	c.addi4spn	x8,x2,16
 90e:	0656                	c.slli	x12,0x15
 910:	0000                	c.unimp
 912:	000008fb          	0x8fb
 916:	6409                	c.lui	x8,0x2
 918:	0000                	c.unimp
 91a:	0200                	c.addi4spn	x8,x2,256
 91c:	1f00                	c.addi4spn	x8,x2,944
 91e:	0468                	c.addi4spn	x10,x2,524
 920:	0000                	c.unimp
 922:	3304                	c.fld	f9,32(x14)
 924:	04621703          	lh	x14,70(x4) # 1d5a8 <_sp+0xd5a8>
 928:	0000                	c.unimp
 92a:	611f 0004 0400      	0x4000004611f
 930:	0334                	c.addi4spn	x13,x2,392
 932:	681d                	c.lui	x16,0x7
 934:	0004                	0x4
 936:	2000                	c.fld	f8,0(x8)
 938:	00000293          	addi	x5,x0,0
 93c:	6706                	c.flwsp	f14,64(x2)
 93e:	b60e                	c.fsdsp	f3,296(x2)
 940:	0005                	c.addi	x0,1
 942:	0800                	c.addi4spn	x8,x2,16
 944:	0064                	c.addi4spn	x9,x2,12
 946:	0000                	c.unimp
 948:	0931                	c.addi	x18,12
 94a:	0000                	c.unimp
 94c:	6409                	c.lui	x8,0x2
 94e:	0000                	c.unimp
 950:	c700                	c.sw	x8,8(x14)
 952:	2100                	c.fld	f8,0(x10)
 954:	000002cb          	fnmsub.s	f5,f0,f0,f0,rne
 958:	0b01                	c.addi	x22,0
 95a:	210e                	c.fldsp	f2,192(x2)
 95c:	0009                	c.addi	x0,2
 95e:	0500                	c.addi4spn	x8,x2,640
 960:	000be003          	0xbe003
 964:	2100                	c.fld	f8,0(x10)
 966:	04fa                	c.slli	x9,0x1e
 968:	0000                	c.unimp
 96a:	0c01                	c.addi	x24,0
 96c:	210e                	c.fldsp	f2,192(x2)
 96e:	0009                	c.addi	x0,2
 970:	0500                	c.addi4spn	x8,x2,640
 972:	0008c003          	lbu	x0,0(x17)
 976:	2200                	c.fld	f8,0(x12)
 978:	0508                	c.addi4spn	x10,x2,640
 97a:	0000                	c.unimp
 97c:	0f01                	c.addi	x30,0
 97e:	5d05                	c.li	x26,-31
 980:	0000                	c.unimp
 982:	b400                	c.fsd	f8,40(x8)
 984:	0000                	c.unimp
 986:	c800                	c.sw	x8,16(x8)
 988:	01000007          	0x1000007
 98c:	239c                	c.fld	f15,0(x15)
 98e:	0062                	c.slli	x0,0x18
 990:	1101                	c.addi	x2,-32
 992:	5d09                	c.li	x26,-30
 994:	0000                	c.unimp
 996:	0300                	c.addi4spn	x8,x2,384
 998:	ec91                	c.bnez	x9,9b4 <hardware_data+0xf4>
 99a:	237e                	c.fldsp	f6,472(x2)
 99c:	0061                	c.addi	x0,24
 99e:	1201                	c.addi	x4,-32
 9a0:	5d09                	c.li	x26,-30
 9a2:	0000                	c.unimp
 9a4:	0200                	c.addi4spn	x8,x2,256
 9a6:	6c91                	c.lui	x25,0x4
 9a8:	c024                	c.sw	x9,64(x8)
 9aa:	0000                	c.unimp
 9ac:	7400                	c.flw	f8,40(x8)
 9ae:	0000                	c.unimp
 9b0:	a100                	c.fsd	f8,0(x10)
 9b2:	0009                	c.addi	x0,2
 9b4:	2300                	c.fld	f8,0(x14)
 9b6:	0069                	c.addi	x0,26
 9b8:	1601                	c.addi	x12,-32
 9ba:	5d0e                	c.lwsp	x26,224(x2)
 9bc:	0000                	c.unimp
 9be:	0200                	c.addi4spn	x8,x2,256
 9c0:	6891                	c.lui	x17,0x4
 9c2:	2400                	c.fld	f8,8(x8)
 9c4:	014c                	c.addi4spn	x11,x2,132
 9c6:	0000                	c.unimp
 9c8:	0054                	c.addi4spn	x13,x2,4
 9ca:	0000                	c.unimp
 9cc:	09bc                	c.addi4spn	x15,x2,216
 9ce:	0000                	c.unimp
 9d0:	01006923          	0x1006923
 9d4:	1222                	c.slli	x4,0x28
 9d6:	005d                	c.addi	x0,23
 9d8:	0000                	c.unimp
 9da:	9102                	c.jalr	x2
 9dc:	0064                	c.addi4spn	x9,x2,12
 9de:	ac24                	c.fsd	f9,88(x8)
 9e0:	0001                	c.addi	x0,0
 9e2:	3000                	c.fld	f8,32(x8)
 9e4:	0000                	c.unimp
 9e6:	d700                	c.sw	x8,40(x14)
 9e8:	0009                	c.addi	x0,2
 9ea:	2300                	c.fld	f8,0(x14)
 9ec:	0069                	c.addi	x0,26
 9ee:	2601                	c.jal	cee <memory_data+0x10e>
 9f0:	5d12                	c.lwsp	x26,36(x2)
 9f2:	0000                	c.unimp
 9f4:	0200                	c.addi4spn	x8,x2,256
 9f6:	6091                	c.lui	x1,0x4
 9f8:	2400                	c.fld	f8,8(x8)
 9fa:	01e8                	c.addi4spn	x10,x2,204
 9fc:	0000                	c.unimp
 9fe:	0030                	c.addi4spn	x12,x2,8
 a00:	0000                	c.unimp
 a02:	09f2                	c.slli	x19,0x1c
 a04:	0000                	c.unimp
 a06:	01006923          	0x1006923
 a0a:	122a                	c.slli	x4,0x2a
 a0c:	005d                	c.addi	x0,23
 a0e:	0000                	c.unimp
 a10:	9102                	c.jalr	x2
 a12:	005c                	c.addi4spn	x15,x2,4
 a14:	2424                	c.fld	f9,72(x8)
 a16:	0002                	c.slli64	x0
 a18:	3000                	c.fld	f8,32(x8)
 a1a:	0000                	c.unimp
 a1c:	0d00                	c.addi4spn	x8,x2,656
 a1e:	000a                	c.slli	x0,0x2
 a20:	2300                	c.fld	f8,0(x14)
 a22:	0069                	c.addi	x0,26
 a24:	2e01                	c.jal	d34 <memory_data+0x154>
 a26:	5d12                	c.lwsp	x26,36(x2)
 a28:	0000                	c.unimp
 a2a:	0200                	c.addi4spn	x8,x2,256
 a2c:	5891                	c.li	x17,-28
 a2e:	2400                	c.fld	f8,8(x8)
 a30:	0260                	c.addi4spn	x8,x2,268
 a32:	0000                	c.unimp
 a34:	0030                	c.addi4spn	x12,x2,8
 a36:	0000                	c.unimp
 a38:	0a28                	c.addi4spn	x10,x2,280
 a3a:	0000                	c.unimp
 a3c:	01006923          	0x1006923
 a40:	1232                	c.slli	x4,0x2c
 a42:	005d                	c.addi	x0,23
 a44:	0000                	c.unimp
 a46:	9102                	c.jalr	x2
 a48:	0054                	c.addi4spn	x13,x2,4
 a4a:	9c24                	0x9c24
 a4c:	0002                	c.slli64	x0
 a4e:	3000                	c.fld	f8,32(x8)
 a50:	0000                	c.unimp
 a52:	4300                	c.lw	x8,0(x14)
 a54:	000a                	c.slli	x0,0x2
 a56:	2300                	c.fld	f8,0(x14)
 a58:	0069                	c.addi	x0,26
 a5a:	3601                	c.jal	55a <main+0x4a6>
 a5c:	5d12                	c.lwsp	x26,36(x2)
 a5e:	0000                	c.unimp
 a60:	0200                	c.addi4spn	x8,x2,256
 a62:	5091                	c.li	x1,-28
 a64:	2400                	c.fld	f8,8(x8)
 a66:	02d8                	c.addi4spn	x14,x2,324
 a68:	0000                	c.unimp
 a6a:	0030                	c.addi4spn	x12,x2,8
 a6c:	0000                	c.unimp
 a6e:	0a5e                	c.slli	x20,0x17
 a70:	0000                	c.unimp
 a72:	01006923          	0x1006923
 a76:	123a                	c.slli	x4,0x2e
 a78:	005d                	c.addi	x0,23
 a7a:	0000                	c.unimp
 a7c:	9102                	c.jalr	x2
 a7e:	004c                	c.addi4spn	x11,x2,4
 a80:	1424                	c.addi4spn	x9,x2,552
 a82:	30000003          	lb	x0,768(x0) # 300 <main+0x24c>
 a86:	0000                	c.unimp
 a88:	7900                	c.flw	f8,48(x10)
 a8a:	000a                	c.slli	x0,0x2
 a8c:	2300                	c.fld	f8,0(x14)
 a8e:	0069                	c.addi	x0,26
 a90:	3e01                	c.jal	5a0 <main+0x4ec>
 a92:	5d12                	c.lwsp	x26,36(x2)
 a94:	0000                	c.unimp
 a96:	0200                	c.addi4spn	x8,x2,256
 a98:	4891                	c.li	x17,4
 a9a:	2400                	c.fld	f8,8(x8)
 a9c:	0350                	c.addi4spn	x12,x2,388
 a9e:	0000                	c.unimp
 aa0:	0030                	c.addi4spn	x12,x2,8
 aa2:	0000                	c.unimp
 aa4:	0a94                	c.addi4spn	x13,x2,336
 aa6:	0000                	c.unimp
 aa8:	01006923          	0x1006923
 aac:	1242                	c.slli	x4,0x30
 aae:	005d                	c.addi	x0,23
 ab0:	0000                	c.unimp
 ab2:	9102                	c.jalr	x2
 ab4:	0044                	c.addi4spn	x9,x2,4
 ab6:	8c24                	0x8c24
 ab8:	30000003          	lb	x0,768(x0) # 300 <main+0x24c>
 abc:	0000                	c.unimp
 abe:	af00                	c.fsd	f8,24(x14)
 ac0:	000a                	c.slli	x0,0x2
 ac2:	2300                	c.fld	f8,0(x14)
 ac4:	0069                	c.addi	x0,26
 ac6:	4601                	c.li	x12,0
 ac8:	5d12                	c.lwsp	x26,36(x2)
 aca:	0000                	c.unimp
 acc:	0200                	c.addi4spn	x8,x2,256
 ace:	4091                	c.li	x1,4
 ad0:	2400                	c.fld	f8,8(x8)
 ad2:	03c8                	c.addi4spn	x10,x2,452
 ad4:	0000                	c.unimp
 ad6:	0030                	c.addi4spn	x12,x2,8
 ad8:	0000                	c.unimp
 ada:	00000acb          	fnmsub.s	f21,f0,f0,f0,rne
 ade:	01006923          	0x1006923
 ae2:	124a                	c.slli	x4,0x32
 ae4:	005d                	c.addi	x0,23
 ae6:	0000                	c.unimp
 ae8:	7fbc9103          	lh	x2,2043(x25) # 47fb <__global_pointer$+0x377b>
 aec:	2400                	c.fld	f8,8(x8)
 aee:	0404                	c.addi4spn	x9,x2,512
 af0:	0000                	c.unimp
 af2:	0030                	c.addi4spn	x12,x2,8
 af4:	0000                	c.unimp
 af6:	00000ae7          	jalr	x21,0(x0) # 0 <crt>
 afa:	01006923          	0x1006923
 afe:	124e                	c.slli	x4,0x33
 b00:	005d                	c.addi	x0,23
 b02:	0000                	c.unimp
 b04:	7fb89103          	lh	x2,2043(x17) # 47fb <__global_pointer$+0x377b>
 b08:	2400                	c.fld	f8,8(x8)
 b0a:	0440                	c.addi4spn	x8,x2,516
 b0c:	0000                	c.unimp
 b0e:	0030                	c.addi4spn	x12,x2,8
 b10:	0000                	c.unimp
 b12:	00000b03          	lb	x22,0(x0) # 0 <crt>
 b16:	01006923          	0x1006923
 b1a:	1252                	c.slli	x4,0x34
 b1c:	005d                	c.addi	x0,23
 b1e:	0000                	c.unimp
 b20:	7fb49103          	lh	x2,2043(x9)
 b24:	2400                	c.fld	f8,8(x8)
 b26:	047c                	c.addi4spn	x15,x2,524
 b28:	0000                	c.unimp
 b2a:	0030                	c.addi4spn	x12,x2,8
 b2c:	0000                	c.unimp
 b2e:	0b1f 0000 6923      	0x692300000b1f
 b34:	0100                	c.addi4spn	x8,x2,128
 b36:	1256                	c.slli	x4,0x35
 b38:	005d                	c.addi	x0,23
 b3a:	0000                	c.unimp
 b3c:	7fb09103          	lh	x2,2043(x1) # 47fb <__global_pointer$+0x377b>
 b40:	2400                	c.fld	f8,8(x8)
 b42:	04b8                	c.addi4spn	x14,x2,584
 b44:	0000                	c.unimp
 b46:	0030                	c.addi4spn	x12,x2,8
 b48:	0000                	c.unimp
 b4a:	00000b3b          	0xb3b
 b4e:	01006923          	0x1006923
 b52:	125a                	c.slli	x4,0x36
 b54:	005d                	c.addi	x0,23
 b56:	0000                	c.unimp
 b58:	7fac9103          	lh	x2,2042(x25)
 b5c:	2400                	c.fld	f8,8(x8)
 b5e:	04f4                	c.addi4spn	x13,x2,588
 b60:	0000                	c.unimp
 b62:	0030                	c.addi4spn	x12,x2,8
 b64:	0000                	c.unimp
 b66:	00000b57          	0xb57
 b6a:	01006923          	0x1006923
 b6e:	125e                	c.slli	x4,0x37
 b70:	005d                	c.addi	x0,23
 b72:	0000                	c.unimp
 b74:	7fa89103          	lh	x2,2042(x17)
 b78:	2400                	c.fld	f8,8(x8)
 b7a:	0530                	c.addi4spn	x12,x2,648
 b7c:	0000                	c.unimp
 b7e:	0030                	c.addi4spn	x12,x2,8
 b80:	0000                	c.unimp
 b82:	00000b73          	0xb73
 b86:	01006923          	0x1006923
 b8a:	1262                	c.slli	x4,0x38
 b8c:	005d                	c.addi	x0,23
 b8e:	0000                	c.unimp
 b90:	7fa49103          	lh	x2,2042(x9)
 b94:	2400                	c.fld	f8,8(x8)
 b96:	056c                	c.addi4spn	x11,x2,652
 b98:	0000                	c.unimp
 b9a:	0030                	c.addi4spn	x12,x2,8
 b9c:	0000                	c.unimp
 b9e:	00000b8f          	0xb8f
 ba2:	01006923          	0x1006923
 ba6:	1266                	c.slli	x4,0x39
 ba8:	005d                	c.addi	x0,23
 baa:	0000                	c.unimp
 bac:	7fa09103          	lh	x2,2042(x1)
 bb0:	2400                	c.fld	f8,8(x8)
 bb2:	05a8                	c.addi4spn	x10,x2,712
 bb4:	0000                	c.unimp
 bb6:	0030                	c.addi4spn	x12,x2,8
 bb8:	0000                	c.unimp
 bba:	00000bab          	0xbab
 bbe:	01006923          	0x1006923
 bc2:	126a                	c.slli	x4,0x3a
 bc4:	005d                	c.addi	x0,23
 bc6:	0000                	c.unimp
 bc8:	7f9c9103          	lh	x2,2041(x25)
 bcc:	2400                	c.fld	f8,8(x8)
 bce:	05e4                	c.addi4spn	x9,x2,716
 bd0:	0000                	c.unimp
 bd2:	0030                	c.addi4spn	x12,x2,8
 bd4:	0000                	c.unimp
 bd6:	00000bc7          	fmsub.s	f23,f0,f0,f0,rne
 bda:	01006923          	0x1006923
 bde:	126e                	c.slli	x4,0x3b
 be0:	005d                	c.addi	x0,23
 be2:	0000                	c.unimp
 be4:	7f989103          	lh	x2,2041(x17)
 be8:	2400                	c.fld	f8,8(x8)
 bea:	0620                	c.addi4spn	x8,x2,776
 bec:	0000                	c.unimp
 bee:	0030                	c.addi4spn	x12,x2,8
 bf0:	0000                	c.unimp
 bf2:	00000be3          	beq	x0,x0,1408 <__global_pointer$+0x388>
 bf6:	01006923          	0x1006923
 bfa:	1272                	c.slli	x4,0x3c
 bfc:	005d                	c.addi	x0,23
 bfe:	0000                	c.unimp
 c00:	7f949103          	lh	x2,2041(x9)
 c04:	2400                	c.fld	f8,8(x8)
 c06:	065c                	c.addi4spn	x15,x2,772
 c08:	0000                	c.unimp
 c0a:	0030                	c.addi4spn	x12,x2,8
 c0c:	0000                	c.unimp
 c0e:	0bff                	0xbff
 c10:	0000                	c.unimp
 c12:	01006923          	0x1006923
 c16:	1276                	c.slli	x4,0x3d
 c18:	005d                	c.addi	x0,23
 c1a:	0000                	c.unimp
 c1c:	7f909103          	lh	x2,2041(x1)
 c20:	2400                	c.fld	f8,8(x8)
 c22:	0698                	c.addi4spn	x14,x2,832
 c24:	0000                	c.unimp
 c26:	0030                	c.addi4spn	x12,x2,8
 c28:	0000                	c.unimp
 c2a:	00000c1b          	0xc1b
 c2e:	01006923          	0x1006923
 c32:	127a                	c.slli	x4,0x3e
 c34:	005d                	c.addi	x0,23
 c36:	0000                	c.unimp
 c38:	7f8c9103          	lh	x2,2040(x25)
 c3c:	2400                	c.fld	f8,8(x8)
 c3e:	06d4                	c.addi4spn	x13,x2,836
 c40:	0000                	c.unimp
 c42:	0030                	c.addi4spn	x12,x2,8
 c44:	0000                	c.unimp
 c46:	00000c37          	lui	x24,0x0
 c4a:	01006923          	0x1006923
 c4e:	127e                	c.slli	x4,0x3f
 c50:	005d                	c.addi	x0,23
 c52:	0000                	c.unimp
 c54:	7f889103          	lh	x2,2040(x17)
 c58:	2400                	c.fld	f8,8(x8)
 c5a:	0710                	c.addi4spn	x12,x2,896
 c5c:	0000                	c.unimp
 c5e:	0030                	c.addi4spn	x12,x2,8
 c60:	0000                	c.unimp
 c62:	00000c53          	fadd.s	f24,f0,f0,rne
 c66:	01006923          	0x1006923
 c6a:	1282                	c.slli	x5,0x20
 c6c:	005d                	c.addi	x0,23
 c6e:	0000                	c.unimp
 c70:	7f849103          	lh	x2,2040(x9)
 c74:	2400                	c.fld	f8,8(x8)
 c76:	074c                	c.addi4spn	x11,x2,900
 c78:	0000                	c.unimp
 c7a:	0030                	c.addi4spn	x12,x2,8
 c7c:	0000                	c.unimp
 c7e:	00000c6f          	jal	x24,c7e <memory_data+0x9e>
 c82:	01006923          	0x1006923
 c86:	1286                	c.slli	x5,0x21
 c88:	005d                	c.addi	x0,23
 c8a:	0000                	c.unimp
 c8c:	7f809103          	lh	x2,2040(x1)
 c90:	2400                	c.fld	f8,8(x8)
 c92:	0788                	c.addi4spn	x10,x2,960
 c94:	0000                	c.unimp
 c96:	0030                	c.addi4spn	x12,x2,8
 c98:	0000                	c.unimp
 c9a:	00000c8b          	0xc8b
 c9e:	01006923          	0x1006923
 ca2:	128a                	c.slli	x5,0x22
 ca4:	005d                	c.addi	x0,23
 ca6:	0000                	c.unimp
 ca8:	7efc9103          	lh	x2,2031(x25)
 cac:	2400                	c.fld	f8,8(x8)
 cae:	07c4                	c.addi4spn	x9,x2,964
 cb0:	0000                	c.unimp
 cb2:	0030                	c.addi4spn	x12,x2,8
 cb4:	0000                	c.unimp
 cb6:	00000ca7          	0xca7
 cba:	01006923          	0x1006923
 cbe:	128e                	c.slli	x5,0x23
 cc0:	005d                	c.addi	x0,23
 cc2:	0000                	c.unimp
 cc4:	7ef89103          	lh	x2,2031(x17)
 cc8:	2400                	c.fld	f8,8(x8)
 cca:	0800                	c.addi4spn	x8,x2,16
 ccc:	0000                	c.unimp
 cce:	0030                	c.addi4spn	x12,x2,8
 cd0:	0000                	c.unimp
 cd2:	00000cc3          	fmadd.s	f25,f0,f0,f0,rne
 cd6:	01006923          	0x1006923
 cda:	1292                	c.slli	x5,0x24
 cdc:	005d                	c.addi	x0,23
 cde:	0000                	c.unimp
 ce0:	7ef49103          	lh	x2,2031(x9)
 ce4:	2500                	c.fld	f8,8(x10)
 ce6:	083c                	c.addi4spn	x15,x2,24
 ce8:	0000                	c.unimp
 cea:	002c                	c.addi4spn	x11,x2,8
 cec:	0000                	c.unimp
 cee:	01006923          	0x1006923
 cf2:	1296                	c.slli	x5,0x25
 cf4:	005d                	c.addi	x0,23
 cf6:	0000                	c.unimp
 cf8:	7ef09103          	lh	x2,2031(x1)
 cfc:	0000                	c.unimp
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
    nop
   0:	1101                	c.addi	x2,-32
   2:	1000                	c.addi4spn	x8,x2,32
    la ra, exit
   4:	5506                	c.lwsp	x10,96(x2)
   6:	0306                	c.slli	x6,0x1
   8:	1b0e                	c.slli	x22,0x23
   a:	250e                	c.fldsp	f10,192(x2)
    la sp, _sp
   c:	130e                	c.slli	x6,0x23
   e:	0005                	c.addi	x0,1
  10:	0000                	c.unimp
  12:	1101                	c.addi	x2,-32
    mv s0, sp
  14:	2501                	c.jal	614 <main+0x560>
  16:	130e                	c.slli	x6,0x23
    la gp, __global_pointer$
  18:	1b0e030b          	0x1b0e030b
  1c:	110e                	c.slli	x2,0x23
  1e:	1201                	c.addi	x4,-32
    li tp, 0
  20:	1006                	c.slli	x0,0x21
  22:	02000017          	auipc	x0,0x2000
    li t0, 0
  26:	0024                	c.addi4spn	x9,x2,8
    li t1, 0
  28:	0b3e0b0b          	0xb3e0b0b
    li t2, 0
  2c:	00000e03          	lb	x28,0(x0) # 0 <crt>
    li s1, 0
  30:	0b002403          	lw	x8,176(x0) # b0 <exit+0x10>
    li a0, 0
  34:	030b3e0b          	0x30b3e0b
    li a1, 0
  38:	0008                	0x8
  3a:	0400                	c.addi4spn	x8,x2,512
    li a2, 0
  3c:	0016                	c.slli	x0,0x5
  3e:	0b3a0e03          	lb	x28,179(x20) # 3b589 <_sp+0x2b589>
    li a3, 0
  42:	0b39053b          	0xb39053b
    li a4, 0
  46:	1349                	c.addi	x6,-14
    li a5, 0
  48:	0000                	c.unimp
  4a:	1605                	c.addi	x12,-31
    li a6, 0
  4c:	0300                	c.addi4spn	x8,x2,384
  4e:	3a0e                	c.fldsp	f20,224(x2)
    li a7, 0
  50:	390b3b0b          	0x390b3b0b
    li s2, 0
  54:	0013490b          	0x13490b
    li s3, 0
  58:	0600                	c.addi4spn	x8,x2,768
  5a:	0b0b0117          	auipc	x2,0xb0b0
    li s4, 0
  5e:	0b3a                	c.slli	x22,0xe
    li s5, 0
  60:	0b390b3b          	0xb390b3b
    li s6, 0
  64:	1301                	c.addi	x6,-32
  66:	0000                	c.unimp
    li s7, 0
  68:	03000d07          	0x3000d07
    li s8, 0
  6c:	3a0e                	c.fldsp	f20,224(x2)
  6e:	390b3b0b          	0x390b3b0b
    li s9, 0
  72:	0013490b          	0x13490b
    li s10, 0
  76:	0800                	c.addi4spn	x8,x2,16
    li s11, 0
  78:	0101                	c.addi	x2,0
  7a:	1349                	c.addi	x6,-14
    li t3, 0
  7c:	1301                	c.addi	x6,-32
  7e:	0000                	c.unimp
    li t4, 0
  80:	2109                	c.jal	482 <main+0x3ce>
  82:	4900                	c.lw	x8,16(x10)
    li t5, 0
  84:	000b2f13          	slti	x30,x22,0
    li t6, 0
  88:	0a00                	c.addi4spn	x8,x2,272
  8a:	0b0b0113          	addi	x2,x22,176
    j main
  8e:	0b3a                	c.slli	x22,0xe
  90:	0b390b3b          	0xb390b3b
  94:	1301                	c.addi	x6,-32
  96:	0000                	c.unimp
  98:	03000d0b          	0x3000d0b
  9c:	3a0e                	c.fldsp	f20,224(x2)
  9e:	390b3b0b          	0x390b3b0b
    la sp, _sp
  a2:	3813490b          	0x3813490b
  a6:	0c00000b          	0xc00000b
    sw a0, -8(sp)
  aa:	0b0b000f          	0xb0b000f
    nop
  ae:	0000                	c.unimp
    wfi
  b0:	130d                	c.addi	x6,-29
  b2:	0301                	c.addi	x6,0
{
  b4:	0b0e                	c.slli	x22,0x3
  b6:	3b0b3a0b          	0x3b0b3a0b
  ba:	010b390b          	0x10b390b
  be:	0e000013          	addi	x0,x0,224
    for (int i = 0; i < 200; i++) {
  c2:	000d                	c.addi	x0,3
  c4:	0b3a0803          	lb	x16,179(x20)
        memory_data[i] = (unsigned int)(i % 30);
  c8:	0b390b3b          	0xb390b3b
  cc:	1349                	c.addi	x6,-14
  ce:	0b38                	c.addi4spn	x14,x2,408
  d0:	0000                	c.unimp
  d2:	0b000f0f          	0xb000f0f
  d6:	0013490b          	0x13490b
  da:	1000                	c.addi4spn	x8,x2,32
  dc:	0e030113          	addi	x2,x6,224
  e0:	0b3a050b          	0xb3a050b
  e4:	0b390b3b          	0xb390b3b
  e8:	1301                	c.addi	x6,-32
  ea:	0000                	c.unimp
  ec:	0d11                	c.addi	x26,4
  ee:	0300                	c.addi4spn	x8,x2,384
  f0:	3a0e                	c.fldsp	f20,224(x2)
  f2:	390b3b0b          	0x390b3b0b
  f6:	3813490b          	0x3813490b
  fa:	0005                	c.addi	x0,1
  fc:	1200                	c.addi4spn	x8,x2,288
  fe:	0015                	c.addi	x0,5
 100:	00001927          	0x1927
 104:	27011513          	0x27011513
 108:	4919                	c.li	x18,6
 10a:	00130113          	addi	x2,x6,1
 10e:	1400                	c.addi4spn	x8,x2,544
 110:	0005                	c.addi	x0,1
 112:	1349                	c.addi	x6,-14
 114:	0000                	c.unimp
 116:	2615                	c.jal	43a <main+0x386>
 118:	4900                	c.lw	x8,16(x10)
 11a:	16000013          	addi	x0,x0,352
    for (int i = 0; i < 200; i++) {
 11e:	0e030113          	addi	x2,x6,224
 122:	0b3a050b          	0xb3a050b
 126:	0b39053b          	0xb39053b
 12a:	1301                	c.addi	x6,-32
 12c:	0000                	c.unimp
 12e:	03000d17          	auipc	x26,0x3000
 132:	3a0e                	c.fldsp	f20,224(x2)
    a = 0;
 134:	39053b0b          	0x39053b0b
    b = 20;
 138:	3813490b          	0x3813490b
 13c:	1800000b          	0x1800000b
    if (b == 1) {
 140:	000d                	c.addi	x0,3
 142:	0b3a0e03          	lb	x28,179(x20)
 146:	0b39053b          	0xb39053b
 14a:	1349                	c.addi	x6,-14
        for (int i = 0; i < 50; i++) {
 14c:	0538                	c.addi4spn	x14,x2,648
 14e:	0000                	c.unimp
 150:	1319                	c.addi	x6,-26
 152:	0301                	c.addi	x6,0
            hardware_data[i] = memory_data[i];
 154:	0b0e                	c.slli	x22,0x3
 156:	3b0b3a0b          	0x3b0b3a0b
 15a:	3905                	c.jal	fffffd8a <_sp+0xfffefd8a>
 15c:	0013010b          	0x13010b
 160:	1a00                	c.addi4spn	x8,x2,304
 162:	0b0b0113          	addi	x2,x22,176
 166:	0b3a                	c.slli	x22,0xe
 168:	0b39053b          	0xb39053b
 16c:	1301                	c.addi	x6,-32
 16e:	0000                	c.unimp
 170:	0b01171b          	0xb01171b
 174:	3b0b3a0b          	0x3b0b3a0b
 178:	3905                	c.jal	fffffda8 <_sp+0xfffefda8>
 17a:	0013010b          	0x13010b
 17e:	1c00                	c.addi4spn	x8,x2,560
 180:	000d                	c.addi	x0,3
 182:	0b3a0e03          	lb	x28,179(x20)
        for (int i = 0; i < 50; i++) {
 186:	0b39053b          	0xb39053b
 18a:	1349                	c.addi	x6,-14
 18c:	0000                	c.unimp
 18e:	131d                	c.addi	x6,-25
 190:	0300                	c.addi4spn	x8,x2,384
 192:	3c0e                	c.fldsp	f24,224(x2)
 194:	0019                	c.addi	x0,6
 196:	1e00                	c.addi4spn	x8,x2,816
 198:	0115                	c.addi	x2,5
 19a:	13011927          	0x13011927
 19e:	0000                	c.unimp
    } else if (b == 2) {
 1a0:	341f 0300 3a0e      	0x3a0e0300341f
 1a6:	39053b0b          	0x39053b0b
 1aa:	3f13490b          	0x3f13490b
        for (int i = 0; i < 10; i++) {
 1ae:	3c19                	c.jal	fffffbc4 <_sp+0xfffefbc4>
 1b0:	0019                	c.addi	x0,6
 1b2:	2000                	c.fld	f8,0(x8)
            a = a + 1;
 1b4:	0034                	c.addi4spn	x13,x2,8
 1b6:	0b3a0e03          	lb	x28,179(x20)
 1ba:	0b390b3b          	0xb390b3b
 1be:	1349                	c.addi	x6,-14
        for (int i = 0; i < 10; i++) {
 1c0:	193c193f 34210000 	0x34210000193c193f
 1c8:	0300                	c.addi4spn	x8,x2,384
 1ca:	3a0e                	c.fldsp	f20,224(x2)
 1cc:	390b3b0b          	0x390b3b0b
 1d0:	3f13490b          	0x3f13490b
 1d4:	0219                	c.addi	x4,6
 1d6:	0018                	0x18
 1d8:	2200                	c.fld	f8,0(x12)
 1da:	012e                	c.slli	x2,0xb
    } else if (b == 3) {
 1dc:	0e03193f 0b3b0b3a 	0xb3b0b3a0e03193f
 1e4:	0b39                	c.addi	x22,14
 1e6:	13491927          	0x13491927
        for (int i = 0; i < 10; i++) {
 1ea:	0111                	c.addi	x2,4
 1ec:	0612                	c.slli	x12,0x4
 1ee:	1840                	c.addi4spn	x8,x2,52
            a = a + 1;
 1f0:	00194297          	auipc	x5,0x194
 1f4:	2300                	c.fld	f8,0(x14)
 1f6:	0034                	c.addi4spn	x13,x2,8
 1f8:	0b3a0803          	lb	x16,179(x20)
        for (int i = 0; i < 10; i++) {
 1fc:	0b390b3b          	0xb390b3b
 200:	1349                	c.addi	x6,-14
 202:	1802                	c.slli	x16,0x20
 204:	0000                	c.unimp
 206:	0b24                	c.addi4spn	x9,x2,408
 208:	1101                	c.addi	x2,-32
 20a:	1201                	c.addi	x4,-32
 20c:	0106                	c.slli	x2,0x1
 20e:	25000013          	addi	x0,x0,592
 212:	0111010b          	0x111010b
 216:	0612                	c.slli	x12,0x4
    } else if (b == 4) {
 218:	0000                	c.unimp
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
    nop
   0:	0024                	c.addi4spn	x9,x2,8
   2:	0000                	c.unimp
    la ra, exit
   4:	0002                	c.slli64	x0
   6:	0000                	c.unimp
   8:	0000                	c.unimp
   a:	0004                	0x4
	...
    mv s0, sp
  14:	0090                	c.addi4spn	x12,x2,64
  16:	0000                	c.unimp
    la gp, __global_pointer$
  18:	00a0                	c.addi4spn	x8,x2,72
  1a:	0000                	c.unimp
  1c:	0014                	0x14
	...
    li t0, 0
  26:	0000                	c.unimp
    li t1, 0
  28:	001c                	0x1c
  2a:	0000                	c.unimp
    li t2, 0
  2c:	0002                	c.slli64	x0
  2e:	0022                	c.slli	x0,0x8
    li s1, 0
  30:	0000                	c.unimp
  32:	0004                	0x4
    li a0, 0
  34:	0000                	c.unimp
  36:	0000                	c.unimp
    li a1, 0
  38:	00b4                	c.addi4spn	x13,x2,72
  3a:	0000                	c.unimp
    li a2, 0
  3c:	07c8                	c.addi4spn	x10,x2,964
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
    nop
   0:	7270                	c.flw	f12,100(x12)
   2:	6172676f          	jal	x14,26e18 <_sp+0x16e18>
    la ra, exit
   6:	736d                	c.lui	x6,0xffffb
   8:	7472632f          	0x7472632f
    la sp, _sp
   c:	732e                	c.flwsp	f6,232(x2)
   e:	2f00                	c.fld	f8,24(x14)
  10:	2f6e                	c.fldsp	f30,216(x2)
  12:	6162                	c.flwsp	f2,24(x2)
    mv s0, sp
  14:	7764                	c.flw	f9,108(x14)
  16:	7461                	c.lui	x8,0xffff8
    la gp, __global_pointer$
  18:	7265                	c.lui	x4,0xffff9
  1a:	682f7a2f          	0x682f7a2f
  1e:	7579                	c.lui	x10,0xffffe
    li tp, 0
  20:	776e                	c.flwsp	f14,248(x2)
  22:	442f6e6f          	jal	x28,f6464 <_sp+0xe6464>
    li t0, 0
  26:	6d75636f          	jal	x6,56efc <_sp+0x46efc>
    li t1, 0
  2a:	6e65                	c.lui	x28,0x19
    li t2, 0
  2c:	7374                	c.flw	f13,100(x14)
  2e:	49475f2f          	0x49475f2f
    li s1, 0
  32:	2f54                	c.fld	f13,152(x14)
    li a0, 0
  34:	4545                	c.li	x10,17
  36:	37355343          	fmadd.q	f6,f10,f19,f6,unknown
    li a1, 0
  3a:	4e470033          	0x4e470033
    li a2, 0
  3e:	2055                	c.jal	e2 <main+0x2e>
    li a3, 0
  40:	5341                	c.li	x6,-16
  42:	3220                	c.fld	f8,96(x12)
    li a4, 0
  44:	332e                	c.fldsp	f6,232(x2)
  46:	0034                	c.addi4spn	x13,x2,8
    li a5, 0
  48:	645f 6f73 685f      	0x685f6f73645f
    li a6, 0
  4e:	6e61                	c.lui	x28,0x18
    li a7, 0
  50:	6c64                	c.flw	f9,92(x8)
  52:	0065                	c.addi	x0,25
    li s2, 0
  54:	735f 7a69 0065      	0x657a69735f
    li s3, 0
  5a:	725f 6e61 3464      	0x34646e61725f
    li s5, 0
  60:	0038                	c.addi4spn	x14,x2,8
  62:	655f 656d 6772      	0x6772656d655f
    li s7, 0
  68:	6e65                	c.lui	x28,0x19
  6a:	5f007963          	bgeu	x0,x16,65c <main+0x5a8>
    li s8, 0
  6e:	74726377          	0x74726377
    li s9, 0
  72:	5f626d6f          	jal	x26,26668 <_sp+0x16668>
    li s10, 0
  76:	74617473          	csrrci	x8,0x746,2
    li s11, 0
  7a:	0065                	c.addi	x0,25
    li t3, 0
  7c:	775f 7363 7472      	0x74727363775f
    li t4, 0
  82:	73626d6f          	jal	x26,267b8 <_sp+0x167b8>
    li t5, 0
  86:	735f 6174 6574      	0x65746174735f
    j main
  8c:	6c00                	c.flw	f8,24(x8)
  8e:	20676e6f          	jal	x28,76294 <_sp+0x66294>
  92:	6f6c                	c.flw	f11,92(x14)
  94:	676e                	c.flwsp	f14,216(x2)
  96:	7520                	c.flw	f8,104(x10)
  98:	736e                	c.flwsp	f6,248(x2)
  9a:	6769                	c.lui	x14,0x1a
  9c:	656e                	c.flwsp	f10,216(x2)
  9e:	2064                	c.fld	f9,192(x8)
    la sp, _sp
  a0:	6e69                	c.lui	x28,0x1a
  a2:	0074                	c.addi4spn	x13,x2,12
  a4:	6c5f 6662 6973      	0x697366626c5f
    sw a0, -8(sp)
  aa:	657a                	c.flwsp	f10,156(x2)
    nop
  ac:	5f00                	c.lw	x8,56(x14)
  ae:	6c5f 636f 6c61      	0x6c61636f6c5f
{
  b4:	5f65                	c.li	x30,-7
  b6:	0074                	c.addi4spn	x13,x2,12
  b8:	6d5f 7262 6f74      	0x6f7472626d5f
  be:	735f6377          	0x735f6377
    for (int i = 0; i < 200; i++) {
  c2:	6174                	c.flw	f13,68(x10)
  c4:	6574                	c.flw	f13,76(x10)
  c6:	5f00                	c.lw	x8,56(x14)
        memory_data[i] = (unsigned int)(i % 30);
  c8:	6f746377          	0x6f746377
  cc:	626d                	c.lui	x4,0x1b
  ce:	735f 6174 6574      	0x65746174735f
  d4:	5f00                	c.lw	x8,56(x14)
  d6:	745f 5f6d 6573      	0x65735f6d745f
  dc:	6f6c0063          	beq	x24,x22,7bc <main+0x708>
  e0:	676e                	c.flwsp	f14,216(x2)
  e2:	6c20                	c.flw	f8,88(x8)
  e4:	20676e6f          	jal	x28,762ea <_sp+0x662ea>
  e8:	6e69                	c.lui	x28,0x1a
  ea:	0074                	c.addi4spn	x13,x2,12
  ec:	755f 7562 0066      	0x667562755f
  f2:	625f 7361 0065      	0x657361625f
  f8:	5f5f 6d74 685f      	0x685f6d745f5f
  fe:	0072756f          	jal	x10,27904 <_sp+0x17904>
 102:	5f5f 6673 5f00      	0x5f0066735f5f
 108:	655f6e6f          	jal	x28,f6f5c <_sp+0xe6f5c>
 10c:	6978                	c.flw	f14,84(x10)
 10e:	5f74                	c.lw	x13,124(x14)
 110:	7261                	c.lui	x4,0xffff8
 112:	5f007367          	0x5f007367
 116:	6b6f6f63          	bltu	x30,x22,7d4 <main+0x720>
 11a:	6569                	c.lui	x10,0x1a
    for (int i = 0; i < 200; i++) {
 11c:	5f00                	c.lw	x8,56(x14)
 11e:	735f 6c67 6575      	0x65756c67735f
 124:	5f00                	c.lw	x8,56(x14)
 126:	6c66                	c.flwsp	f24,88(x2)
 128:	6761                	c.lui	x14,0x18
 12a:	695f0073          	0x695f0073
 12e:	78635f73          	csrrwi	x30,0x786,6
 132:	0061                	c.addi	x0,24
    a = 0;
 134:	735f 6474 6e69      	0x6e696474735f
    b = 20;
 13a:	5f00                	c.lw	x8,56(x14)
 13c:	6c62                	c.flwsp	f24,24(x2)
 13e:	7a69736b          	0x7a69736b
    if (b == 1) {
 142:	0065                	c.addi	x0,25
 144:	635f 7476 7562      	0x75627476635f
 14a:	0066                	c.slli	x0,0x19
        for (int i = 0; i < 50; i++) {
 14c:	6f5f 6666 6573      	0x657366666f5f
 152:	0074                	c.addi4spn	x13,x2,12
            hardware_data[i] = memory_data[i];
 154:	6d5f 7362 7472      	0x747273626d5f
 15a:	7363776f          	jal	x14,37890 <_sp+0x27890>
 15e:	735f 6174 6574      	0x65746174735f
 164:	5f00                	c.lw	x8,56(x14)
 166:	626d                	c.lui	x4,0x1b
 168:	6c72                	c.flwsp	f24,28(x2)
 16a:	6e65                	c.lui	x28,0x19
 16c:	735f 6174 6574      	0x65746174735f
 172:	5f00                	c.lw	x8,56(x14)
 174:	6e66                	c.flwsp	f28,88(x2)
 176:	7261                	c.lui	x4,0xffff8
 178:	5f007367          	0x5f007367
 17c:	6e66                	c.flwsp	f28,88(x2)
 17e:	735f0073          	0x735f0073
 182:	6769                	c.lui	x14,0x1a
        for (int i = 0; i < 50; i++) {
 184:	006e                	c.slli	x0,0x1b
 186:	665f 6f6c 6b63      	0x6b636f6c665f
 18c:	745f 5f00 7473      	0x74735f00745f
 192:	6564                	c.flw	f9,76(x10)
 194:	7272                	c.flwsp	f4,60(x2)
 196:	5f00                	c.lw	x8,56(x14)
 198:	6942                	c.flwsp	f18,16(x2)
 19a:	746e6967          	0x746e6967
 19e:	5f00                	c.lw	x8,56(x14)
    } else if (b == 2) {
 1a0:	6d6d6167          	0x6d6d6167
 1a4:	5f61                	c.li	x30,-8
 1a6:	6e676973          	csrrsi	x18,0x6e6,14
 1aa:	006d6167          	0x6d6167
        for (int i = 0; i < 10; i++) {
 1ae:	725f 6165 0064      	0x646165725f
            a = a + 1;
 1b4:	725f 7365 6c75      	0x6c757365725f
 1ba:	5f74                	c.lw	x13,124(x14)
 1bc:	5f5f006b          	0x5f5f006b
        for (int i = 0; i < 10; i++) {
 1c0:	6d74                	c.flw	f13,92(x10)
 1c2:	5f00                	c.lw	x8,56(x14)
 1c4:	775f 6863 0062      	0x626863775f
 1ca:	735f 6474 756f      	0x756f6474735f
 1d0:	0074                	c.addi4spn	x13,x2,12
 1d2:	635f 7476 656c      	0x656c7476635f
 1d8:	006e                	c.slli	x0,0x1b
 1da:	665f 6c69 0065      	0x656c69665f
    } else if (b == 3) {
 1e0:	6e5f 6f69 7362      	0x73626f696e5f
 1e6:	7300                	c.flw	f8,32(x14)
        for (int i = 0; i < 10; i++) {
 1e8:	6f68                	c.flw	f10,92(x14)
 1ea:	7472                	c.flwsp	f8,60(x2)
 1ec:	7520                	c.flw	f8,104(x10)
 1ee:	736e                	c.flwsp	f6,248(x2)
            a = a + 1;
 1f0:	6769                	c.lui	x14,0x1a
 1f2:	656e                	c.flwsp	f10,216(x2)
 1f4:	2064                	c.fld	f9,192(x8)
 1f6:	6e69                	c.lui	x28,0x1a
 1f8:	0074                	c.addi4spn	x13,x2,12
 1fa:	615f 6574 6978      	0x69786574615f
        for (int i = 0; i < 10; i++) {
 200:	3074                	c.fld	f13,224(x8)
 202:	5f00                	c.lw	x8,56(x14)
 204:	6e676973          	csrrsi	x18,0x6e6,14
 208:	6c61                	c.lui	x24,0x18
 20a:	625f 6675 5f00      	0x5f006675625f
 210:	7361                	c.lui	x6,0xffff8
 212:	6d697463          	bgeu	x18,x22,8da <hardware_data+0x1a>
 216:	5f65                	c.li	x30,-7
    } else if (b == 4) {
 218:	7562                	c.flwsp	f10,56(x2)
 21a:	0066                	c.slli	x0,0x19
 21c:	725f 7365 6c75      	0x6c757365725f
 222:	0074                	c.addi4spn	x13,x2,12
        for (int i = 0; i < 100; i++) {
 224:	5f5f 6377 0068      	0x6863775f5f
 22a:	746e6977          	0x746e6977
            a = a + 1;
 22e:	745f 5f00 6f6c      	0x6f6c5f00745f
 234:	5f006b63          	bltu	x0,x16,82a <main+0x776>
        for (int i = 0; i < 100; i++) {
 238:	6c66                	c.flwsp	f24,88(x2)
 23a:	6761                	c.lui	x14,0x18
 23c:	5f003273          	csrrc	x4,0x5f0,x0
 240:	74697277          	0x74697277
 244:	0065                	c.addi	x0,25
 246:	5f5f 6d74 795f      	0x795f6d745f5f
 24c:	6165                	c.addi16sp	x2,112
 24e:	0072                	c.slli	x0,0x1c
 250:	6e5f 616d 6c6c      	0x6c6c616d6e5f
    } else if (b == 5) {
 256:	6c00636f          	jal	x6,6916 <__global_pointer$+0x5896>
 25a:	20676e6f          	jal	x28,76460 <_sp+0x66460>
 25e:	6f64                	c.flw	f9,92(x14)
        for (int i = 0; i < 50; i++) {
 260:	6275                	c.lui	x4,0x1d
 262:	656c                	c.flw	f11,76(x10)
 264:	5f00                	c.lw	x8,56(x14)
 266:	656e                	c.flwsp	f10,216(x2)
            a = a + 1;
 268:	7478                	c.flw	f14,108(x8)
 26a:	0066                	c.slli	x0,0x19
 26c:	7270                	c.flw	f12,100(x12)
 26e:	6172676f          	jal	x14,27084 <_sp+0x17084>
 272:	736d                	c.lui	x6,0xffffb
        for (int i = 0; i < 50; i++) {
 274:	6863732f          	0x6863732f
 278:	6465                	c.lui	x8,0x19
 27a:	6c75                	c.lui	x24,0x1d
 27c:	7265                	c.lui	x4,0xffff9
 27e:	2e34                	c.fld	f13,88(x12)
 280:	5f5f0063          	beq	x30,x21,860 <main+0x7ac>
 284:	6d74                	c.flw	f13,92(x10)
 286:	6d5f 6e6f 5f00      	0x5f006e6f6d5f
 28c:	7461                	c.lui	x8,0xffff8
 28e:	7865                	c.lui	x16,0xffff9
    } else if (b == 6) {
 290:	7469                	c.lui	x8,0xffffa
 292:	7300                	c.flw	f8,32(x14)
 294:	6275                	c.lui	x4,0x1d
 296:	6174706f          	jal	x0,480ac <_sp+0x380ac>
 29a:	6772                	c.flwsp	f14,28(x2)
        for (int i = 0; i < 60; i++) {
 29c:	5f00                	c.lw	x8,56(x14)
 29e:	735f 6964 6964      	0x69646964735f
            a = a + 1;
 2a4:	696e                	c.flwsp	f18,216(x2)
 2a6:	0074                	c.addi4spn	x13,x2,12
 2a8:	6f5f 6666 745f      	0x745f66666f5f
 2ae:	5f00                	c.lw	x8,56(x14)
        for (int i = 0; i < 60; i++) {
 2b0:	7266                	c.flwsp	f4,120(x2)
 2b2:	6565                	c.lui	x10,0x19
 2b4:	696c                	c.flw	f11,84(x10)
 2b6:	5f007473          	csrrci	x8,0x5f0,0
 2ba:	4f4c                	c.lw	x11,28(x14)
 2bc:	525f4b43          	fmadd.d	f22,f30,f5,f10,rmm
 2c0:	4345                	c.li	x6,17
 2c2:	5255                	c.li	x4,-11
 2c4:	45564953          	0x45564953
 2c8:	545f 6d00 6d65      	0x6d656d00545f
    } else if (b == 7) {
 2ce:	5f79726f          	jal	x4,980c4 <_sp+0x880c4>
 2d2:	6164                	c.flw	f9,68(x10)
 2d4:	6174                	c.flw	f13,68(x10)
 2d6:	7500                	c.flw	f8,40(x10)
        for (int i = 0; i < 70; i++) {
 2d8:	736e                	c.flwsp	f6,248(x2)
 2da:	6769                	c.lui	x14,0x1a
 2dc:	656e                	c.flwsp	f10,216(x2)
 2de:	2064                	c.fld	f9,192(x8)
            a = a + 1;
 2e0:	72616863          	bltu	x2,x6,a10 <hardware_data+0x150>
 2e4:	5f00                	c.lw	x8,56(x14)
 2e6:	656e                	c.flwsp	f10,216(x2)
 2e8:	4e470077          	0x4e470077
        for (int i = 0; i < 70; i++) {
 2ec:	2055                	c.jal	390 <main+0x2dc>
 2ee:	20313143          	fmadd.s	f2,f2,f3,f4,rup
 2f2:	2e39                	c.jal	610 <main+0x55c>
 2f4:	2e32                	c.fldsp	f28,264(x2)
 2f6:	2030                	c.fld	f12,64(x8)
 2f8:	6d2d                	c.lui	x26,0xb
 2fa:	6f6e                	c.flwsp	f30,216(x2)
 2fc:	722d                	c.lui	x4,0xfffeb
 2fe:	6c65                	c.lui	x24,0x19
 300:	7861                	c.lui	x16,0xffff8
 302:	2d20                	c.fld	f8,88(x10)
 304:	616d                	c.addi16sp	x2,240
 306:	6372                	c.flwsp	f6,28(x2)
    } else if (b == 8) {
 308:	3d68                	c.fld	f10,248(x10)
 30a:	7672                	c.flwsp	f12,60(x2)
 30c:	6d693233          	0x6d693233
 310:	2d20                	c.fld	f8,88(x10)
 312:	616d                	c.addi16sp	x2,240
        for (int i = 0; i < 80; i++) {
 314:	6962                	c.flwsp	f18,24(x2)
 316:	693d                	c.lui	x18,0xf
 318:	706c                	c.flw	f11,100(x8)
 31a:	2d203233          	0x2d203233
            a = a + 1;
 31e:	736d                	c.lui	x6,0xffffb
 320:	7274                	c.flw	f13,100(x12)
 322:	6369                	c.lui	x6,0x1a
 324:	2d74                	c.fld	f13,216(x10)
 326:	6c61                	c.lui	x24,0x18
        for (int i = 0; i < 80; i++) {
 328:	6769                	c.lui	x14,0x1a
 32a:	206e                	c.fldsp	f0,216(x2)
 32c:	6d2d                	c.lui	x26,0xb
 32e:	6f6e                	c.flwsp	f30,216(x2)
 330:	642d                	c.lui	x8,0xb
 332:	7669                	c.lui	x12,0xffffa
 334:	2d20                	c.fld	f8,88(x10)
 336:	746d                	c.lui	x8,0xffffb
 338:	6e75                	c.lui	x28,0x1d
 33a:	3d65                	c.jal	1f2 <main+0x13e>
 33c:	6f72                	c.flwsp	f30,28(x2)
 33e:	74656b63          	bltu	x10,x6,a94 <hardware_data+0x1d4>
 342:	2d20                	c.fld	f8,88(x10)
    } else if (b == 9) {
 344:	4f2d2067          	0x4f2d2067
 348:	2030                	c.fld	f12,64(x8)
 34a:	732d                	c.lui	x6,0xfffeb
 34c:	6474                	c.flw	f13,76(x8)
 34e:	673d                	c.lui	x14,0xf
        for (int i = 0; i < 90; i++) {
 350:	756e                	c.flwsp	f10,248(x2)
 352:	3131                	c.jal	ffffff5e <_sp+0xfffeff5e>
 354:	5f00                	c.lw	x8,56(x14)
 356:	5f68                	c.lw	x10,124(x14)
            a = a + 1;
 358:	7265                	c.lui	x4,0xffff9
 35a:	6e72                	c.flwsp	f28,28(x2)
 35c:	6873006f          	jal	x0,311e2 <_sp+0x211e2>
 360:	2074726f          	jal	x4,47d66 <_sp+0x37d66>
        for (int i = 0; i < 90; i++) {
 364:	6e69                	c.lui	x28,0x1a
 366:	0074                	c.addi4spn	x13,x2,12
 368:	5f5f 6d74 795f      	0x795f6d745f5f
 36e:	6164                	c.flw	f9,68(x10)
 370:	0079                	c.addi	x0,30
 372:	5f5f 6273 6675      	0x667562735f5f
 378:	5f00                	c.lw	x8,56(x14)
 37a:	6f69                	c.lui	x30,0x1a
 37c:	7362                	c.flwsp	f6,56(x2)
 37e:	5f00                	c.lw	x8,56(x14)
    } else if (b == 10) {
 380:	465f 4c49 0045      	0x454c49465f
 386:	6d5f 7362 6174      	0x617473626d5f
        for (int i = 0; i < 100; i++) {
 38c:	6574                	c.flw	f13,76(x10)
 38e:	745f 5f00 735f      	0x735f5f00745f
            a = a + 1;
 394:	4946                	c.lwsp	x18,80(x2)
 396:	454c                	c.lw	x11,12(x10)
 398:	5f00                	c.lw	x8,56(x14)
 39a:	626d                	c.lui	x4,0x1b
 39c:	74617473          	csrrci	x8,0x746,2
        for (int i = 0; i < 100; i++) {
 3a0:	0065                	c.addi	x0,25
 3a2:	725f 6e61 5f64      	0x5f646e61725f
 3a8:	656e                	c.flwsp	f10,216(x2)
 3aa:	7478                	c.flw	f14,108(x8)
 3ac:	5f00                	c.lw	x8,56(x14)
 3ae:	626d                	c.lui	x4,0x1b
 3b0:	656c                	c.flw	f11,76(x10)
 3b2:	5f6e                	c.lwsp	x30,248(x2)
 3b4:	74617473          	csrrci	x8,0x746,2
 3b8:	0065                	c.addi	x0,25
 3ba:	695f 636e 5f00      	0x5f00636e695f
    } else if (b == 11) {
 3c0:	6e69                	c.lui	x28,0x1a
 3c2:	0064                	c.addi4spn	x9,x2,12
 3c4:	6c5f 636f 6c61      	0x6c61636f6c5f
        for (int i = 0; i < 110; i++) {
 3ca:	0065                	c.addi	x0,25
 3cc:	5f5f 6c63 6165      	0x61656c635f5f
            a = a + 1;
 3d2:	756e                	c.flwsp	f10,248(x2)
 3d4:	0070                	c.addi4spn	x12,x2,12
 3d6:	755f 736e 6570      	0x6570736e755f
        for (int i = 0; i < 110; i++) {
 3dc:	69666963          	bltu	x12,x22,a6e <hardware_data+0x1ae>
 3e0:	6465                	c.lui	x8,0x19
 3e2:	6c5f 636f 6c61      	0x6c61636f6c5f
 3e8:	5f65                	c.li	x30,-7
 3ea:	6e69                	c.lui	x28,0x1a
 3ec:	6f66                	c.flwsp	f30,88(x2)
 3ee:	5f00                	c.lw	x8,56(x14)
 3f0:	616d                	c.addi16sp	x2,240
 3f2:	7778                	c.flw	f14,108(x14)
 3f4:	7364                	c.flw	f9,100(x14)
 3f6:	5f00                	c.lw	x8,56(x14)
    } else if (b == 12) {
 3f8:	6572                	c.flwsp	f10,28(x2)
 3fa:	6e65                	c.lui	x28,0x19
 3fc:	0074                	c.addi4spn	x13,x2,12
 3fe:	735f 6565 0064      	0x646565735f
        for (int i = 0; i < 120; i++) {
 404:	5f5f 6f63 6e75      	0x6e756f635f5f
 40a:	0074                	c.addi4spn	x13,x2,12
            a = a + 1;
 40c:	5f5f 6176 756c      	0x756c61765f5f
 412:	0065                	c.addi	x0,25
 414:	735f 6565 006b      	0x6b6565735f
        for (int i = 0; i < 120; i++) {
 41a:	665f 6f70 5f73      	0x5f736f70665f
 420:	0074                	c.addi4spn	x13,x2,12
 422:	5f5f 6d74 6d5f      	0x6d5f6d745f5f
 428:	6e69                	c.lui	x28,0x1a
 42a:	5f00                	c.lw	x8,56(x14)
 42c:	756d                	c.lui	x10,0xffffb
 42e:	746c                	c.flw	f11,108(x8)
 430:	5f00                	c.lw	x8,56(x14)
 432:	74727473          	csrrci	x8,0x747,4
    } else if (b == 13) {
 436:	6c5f6b6f          	jal	x22,f72fa <_sp+0xe72fa>
 43a:	7361                	c.lui	x6,0xffff8
 43c:	0074                	c.addi4spn	x13,x2,12
 43e:	665f 746e 7079      	0x7079746e665f
        for (int i = 0; i < 130; i++) {
 444:	7365                	c.lui	x6,0xffff9
 446:	5f00                	c.lw	x8,56(x14)
            a = a + 1;
 448:	6461                	c.lui	x8,0x18
 44a:	0064                	c.addi4spn	x9,x2,12
 44c:	5f5f 4c55 6e6f      	0x6e6f4c555f5f
 452:	675f0067          	jalr	x0,1653(x30) # 1a675 <_sp+0xa675>
        for (int i = 0; i < 130; i++) {
 456:	7465                	c.lui	x8,0xffff9
 458:	6164                	c.flw	f9,68(x10)
 45a:	6574                	c.flw	f13,76(x10)
 45c:	655f 7272 5f00      	0x5f007272655f
 462:	626f6c67          	0x626f6c67
 466:	6c61                	c.lui	x24,0x18
 468:	695f 706d 7275      	0x7275706d695f
 46e:	5f65                	c.li	x30,-7
    } else if (b == 14) {
 470:	7470                	c.flw	f12,108(x8)
 472:	0072                	c.slli	x0,0x1c
 474:	755f 756e 6573      	0x6573756e755f
 47a:	5f64                	c.lw	x9,124(x14)
        for (int i = 0; i < 140; i++) {
 47c:	6172                	c.flwsp	f2,28(x2)
 47e:	646e                	c.flwsp	f8,216(x2)
 480:	5f00                	c.lw	x8,56(x14)
 482:	00736477          	0x736477
            a = a + 1;
 486:	5f5f 6d74 775f      	0x775f6d745f5f
 48c:	6164                	c.flw	f9,68(x10)
 48e:	0079                	c.addi	x0,30
        for (int i = 0; i < 140; i++) {
 490:	675f 756c 0065      	0x65756c675f
 496:	735f 6973 657a      	0x657a6973735f
 49c:	745f 5f00 366c      	0x366c5f00745f
 4a2:	6134                	c.flw	f13,64(x10)
 4a4:	625f 6675 5f00      	0x5f006675625f
 4aa:	5f676973          	csrrsi	x18,0x5f6,14
    } else if (b == 15) {
 4ae:	7566                	c.flwsp	f10,120(x2)
 4b0:	636e                	c.flwsp	f6,216(x2)
 4b2:	5f00                	c.lw	x8,56(x14)
 4b4:	626e                	c.flwsp	f4,216(x2)
 4b6:	6675                	c.lui	x12,0x1d
        for (int i = 0; i < 150; i++) {
 4b8:	5f00                	c.lw	x8,56(x14)
 4ba:	6e75                	c.lui	x28,0x1d
 4bc:	7375                	c.lui	x6,0xffffd
 4be:	6465                	c.lui	x8,0x19
            a = a + 1;
 4c0:	5f00                	c.lw	x8,56(x14)
 4c2:	745f 5f6d 7369      	0x73695f6d745f
 4c8:	7364                	c.flw	f9,100(x14)
 4ca:	0074                	c.addi4spn	x13,x2,12
        for (int i = 0; i < 150; i++) {
 4cc:	6c5f 636f 6c61      	0x6c61636f6c5f
 4d2:	6974                	c.flw	f13,84(x10)
 4d4:	656d                	c.lui	x10,0x1b
 4d6:	625f 6675 5f00      	0x5f006675625f
 4dc:	736f6c63          	bltu	x30,x22,c14 <memory_data+0x34>
 4e0:	0065                	c.addi	x0,25
 4e2:	725f 3834 5f00      	0x5f003834725f
    } else if (b == 16) {
 4e8:	626d                	c.lui	x4,0x1b
 4ea:	6f74                	c.flw	f13,92(x14)
 4ec:	735f6377          	0x735f6377
 4f0:	6174                	c.flw	f13,68(x10)
 4f2:	6574                	c.flw	f13,76(x10)
        for (int i = 0; i < 160; i++) {
 4f4:	5f00                	c.lw	x8,56(x14)
 4f6:	3570                	c.fld	f12,232(x10)
 4f8:	61680073          	0x61680073
            a = a + 1;
 4fc:	6472                	c.flwsp	f8,28(x2)
 4fe:	65726177          	0x65726177
 502:	645f 7461 0061      	0x617461645f
        for (int i = 0; i < 160; i++) {
 508:	616d                	c.addi16sp	x2,240
 50a:	6e69                	c.lui	x28,0x1a
 50c:	5f00                	c.lw	x8,56(x14)
 50e:	745f 5f6d 646d      	0x646d5f6d745f
 514:	7961                	c.lui	x18,0xffff8
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
    nop
   0:	ffff                	0xffff
   2:	ffff                	0xffff
	...
    la sp, _sp
   c:	0090                	c.addi4spn	x12,x2,64
   e:	0000                	c.unimp
  10:	00a0                	c.addi4spn	x8,x2,72
  12:	0000                	c.unimp
    mv s0, sp
  14:	00b4                	c.addi4spn	x13,x2,72
	...

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
    nop
   0:	000c                	0xc
   2:	0000                	c.unimp
    la ra, exit
   4:	ffff                	0xffff
   6:	ffff                	0xffff
   8:	7c010003          	lb	x0,1984(x2) # b0b081a <_sp+0xb0a081a>
    la sp, _sp
   c:	0d01                	c.addi	x26,0
   e:	0002                	c.slli64	x0
  10:	0024                	c.addi4spn	x9,x2,8
  12:	0000                	c.unimp
    mv s0, sp
  14:	0000                	c.unimp
  16:	0000                	c.unimp
    la gp, __global_pointer$
  18:	00b4                	c.addi4spn	x13,x2,72
  1a:	0000                	c.unimp
  1c:	07c8                	c.addi4spn	x10,x2,964
  1e:	0000                	c.unimp
    li tp, 0
  20:	0e44                	c.addi4spn	x9,x2,788
  22:	01a0                	c.addi4spn	x8,x2,200
    li t0, 0
  24:	8844                	0x8844
  26:	4401                	c.li	x8,0
    li t1, 0
  28:	080c                	c.addi4spn	x11,x2,16
  2a:	0300                	c.addi4spn	x8,x2,384
    li t2, 0
  2c:	07b4                	c.addi4spn	x13,x2,968
  2e:	0cc8                	c.addi4spn	x10,x2,596
    li s1, 0
  30:	a002                	c.fsdsp	f0,0(x2)
  32:	4401                	c.li	x8,0
    li a0, 0
  34:	000e                	c.slli	x0,0x3
	...
